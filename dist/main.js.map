{"version":3,"sources":["webpack://storm-react-diagrams/webpack/universalModuleDefinition","webpack://storm-react-diagrams/./src/BaseEntity.ts","webpack://storm-react-diagrams/./src/DiagramEngine.ts","webpack://storm-react-diagrams/./src/Toolkit.ts","webpack://storm-react-diagrams/./src/actions/BaseAction.ts","webpack://storm-react-diagrams/./src/actions/MoveCanvasAction.ts","webpack://storm-react-diagrams/./src/actions/MoveItemsAction.ts","webpack://storm-react-diagrams/./src/actions/SelectingAction.ts","webpack://storm-react-diagrams/./src/defaults/factories/DefaultLabelFactory.tsx","webpack://storm-react-diagrams/./src/defaults/factories/DefaultLinkFactory.tsx","webpack://storm-react-diagrams/./src/defaults/factories/DefaultNodeFactory.ts","webpack://storm-react-diagrams/./src/defaults/factories/DefaultPortFactory.tsx","webpack://storm-react-diagrams/./src/defaults/models/DefaultLabelModel.tsx","webpack://storm-react-diagrams/./src/defaults/models/DefaultLinkModel.ts","webpack://storm-react-diagrams/./src/defaults/models/DefaultNodeModel.ts","webpack://storm-react-diagrams/./src/defaults/models/DefaultPortModel.ts","webpack://storm-react-diagrams/./src/defaults/widgets/DefaultLabelWidget.tsx","webpack://storm-react-diagrams/./src/defaults/widgets/DefaultLinkWidget.tsx","webpack://storm-react-diagrams/./src/defaults/widgets/DefaultNodeWidget.tsx","webpack://storm-react-diagrams/./src/defaults/widgets/DefaultPortLabelWidget.tsx","webpack://storm-react-diagrams/./src/factories/AbstractFactory.ts","webpack://storm-react-diagrams/./src/factories/AbstractLabelFactory.ts","webpack://storm-react-diagrams/./src/factories/AbstractLinkFactory.ts","webpack://storm-react-diagrams/./src/factories/AbstractNodeFactory.ts","webpack://storm-react-diagrams/./src/factories/AbstractPortFactory.ts","webpack://storm-react-diagrams/./src/main.ts","webpack://storm-react-diagrams/./src/models/BaseModel.ts","webpack://storm-react-diagrams/./src/models/DiagramModel.ts","webpack://storm-react-diagrams/./src/models/LabelModel.ts","webpack://storm-react-diagrams/./src/models/LinkModel.ts","webpack://storm-react-diagrams/./src/models/NodeModel.ts","webpack://storm-react-diagrams/./src/models/PointModel.ts","webpack://storm-react-diagrams/./src/models/PortModel.ts","webpack://storm-react-diagrams/./src/routing/PathFinding.ts","webpack://storm-react-diagrams/./src/widgets/BaseWidget.tsx","webpack://storm-react-diagrams/./src/widgets/DiagramWidget.tsx","webpack://storm-react-diagrams/./src/widgets/LinkWidget.tsx","webpack://storm-react-diagrams/./src/widgets/NodeWidget.tsx","webpack://storm-react-diagrams/./src/widgets/PortWidget.tsx","webpack://storm-react-diagrams/./src/widgets/layers/LinkLayerWidget.tsx","webpack://storm-react-diagrams/./src/widgets/layers/LinkLayerWidgetInner.tsx","webpack://storm-react-diagrams/./src/widgets/layers/NodeLayerWidget.tsx","webpack://storm-react-diagrams/./src/widgets/layers/NodeLayerWidgetInner.tsx","webpack://storm-react-diagrams/external \"closest\"","webpack://storm-react-diagrams/external \"lodash\"","webpack://storm-react-diagrams/external \"pathfinding\"","webpack://storm-react-diagrams/external \"paths-js/path\"","webpack://storm-react-diagrams/external \"react\"","webpack://storm-react-diagrams/webpack/bootstrap","webpack://storm-react-diagrams/webpack/startup"],"names":["root","factory","exports","module","define","amd","self","id","this","listeners","Toolkit","UID","locked","getID","doClone","lookupTable","clone","_","clearListeners","deSerialize","data","engine","serialize","iterateListeners","cb","event","firing","entity","stopPropagation","i","hasOwnProperty","removeListener","listener","addListener","uid","isLocked","setLocked","lockChanged","BaseEntity","canvasMatrix","routingMatrix","hAdjustmentFactor","vAdjustmentFactor","calculateMatrixDimensions","allNodesCoords","values","diagramModel","nodes","map","item","x","width","y","height","allLinks","links","allPortsCoords","flatMap","link","sourcePort","targetPort","filter","port","allPointsCoords","points","canvas","minX","Math","floor","min","minBy","concat","ROUTING_SCALING_FACTOR","maxXElement","maxBy","maxX","max","offsetWidth","minY","maxYElement","maxY","offsetHeight","ceil","abs","markNodes","matrix","forEach","node","startX","endX","startY","endY","markMatrixPoint","translateRoutingX","translateRoutingY","markPorts","undefined","DiagramModel","nodeFactories","linkFactories","portFactories","labelFactories","paintableWidgets","linksThatHaveInitiallyRendered","TESTING","TESTING_UID","window","installDefaultFactories","registerNodeFactory","DefaultNodeFactory","registerLinkFactory","DefaultLinkFactory","registerPortFactory","DefaultPortFactory","registerLabelFactory","DefaultLabelFactory","repaintCanvas","clearRepaintEntities","enableRepaintEntities","entities","NodeModel","getPorts","getLinks","PointModel","getLink","isModelLocked","model","recalculatePortsVisually","nodesRendered","canEntityRepaint","baseModel","setCanvas","setDiagramModel","getDiagramModel","getNodeFactories","getLinkFactories","getLabelFactories","getType","labelFactoriesUpdated","portFactoriesUpdated","nodeFactoriesUpdated","linkFactoriesUpdated","getPortFactory","type","Error","getNodeFactory","getLinkFactory","getLabelFactory","getFactoryForNode","getFactoryForLink","getFactoryForLabel","label","generateWidgetForLink","linkFactory","generateReactWidget","generateWidgetForNode","nodeFactory","getRelativeMousePoint","point","getRelativePoint","clientX","clientY","getOffsetX","getZoomLevel","getOffsetY","canvasRect","getBoundingClientRect","left","top","getNodeElement","selector","querySelector","getNodePortElement","getName","getParent","getPortCenter","sourceElement","sourceRect","rel","getPortCoords","getNodeDimensions","nodeRect","getMaxNumberPointsPerLink","maxNumberPointsPerLink","setMaxNumberPointsPerLink","isSmartRoutingEnabled","smartRouting","setSmartRoutingStatus","status","getCanvasMatrix","length","calculateCanvasMatrix","canvasWidth","canvasHeight","matrixWidth","matrixHeight","range","Array","fill","getRoutingMatrix","calculateRoutingMatrix","cloneDeep","reverse","zoomToFit","xFactor","clientWidth","scrollWidth","yFactor","clientHeight","scrollHeight","zoomFactor","setZoomLevel","setOffset","DiagramEngine","replace","c","r","random","toString","closest","element","document","body","generateLinePath","firstPoint","lastPoint","generateCurvePath","curvy","isHorizontal","curvyX","curvyY","generateDynamicPath","pathCoords","path","Path","moveto","slice","coords","lineto","print","mouseX","mouseY","ms","Date","getTime","BaseAction","initialOffsetX","initialOffsetY","MoveCanvasAction","diagramEngine","moved","getSelectedItems","selectedItems","selectionModels","initialX","initialY","MoveItemsAction","mouseX2","mouseY2","getBoxDimensions","right","bottom","containsElement","z","dimensions","SelectingAction","DefaultLabelWidget","getNewInstance","initialConfig","DefaultLabelModel","AbstractLabelFactory","React","createElement","DefaultLinkWidget","DefaultLinkModel","generateLinkSegment","widget","selected","className","bem","strokeWidth","stroke","color","d","AbstractLinkFactory","DefaultNodeWidget","DefaultNodeModel","AbstractNodeFactory","DefaultPortModel","AbstractPortFactory","offsetY","setLabel","LabelModel","curvyness","merge","ob","addLabel","labelOb","setWidth","widthChanged","setColor","colorChanged","LinkModel","name","addInPort","addPort","addOutPort","object","getInPorts","ports","portModel","in","getOutPorts","isInput","createLinkModel","setSourcePort","setTargetPort","canLinkToPort","PortModel","props","render","getProps","BaseWidget","addPointToLink","index","shiftKey","setSelected","forceUpdate","addPoint","pointAdded","findPathAndRelativePositionToRenderLabel","lengths","refPaths","getTotalLength","labelPosition","reduce","previousValue","currentValue","labels","pathIndex","position","calculateLabelPosition","refLabels","labelDimensions","pathCentre","getPointAtLength","labelCoordinates","offsetX","setAttribute","state","pathFinding","calculateAllLabelPosition","componentDidUpdate","requestAnimationFrame","bind","componentDidMount","generatePoint","pointIndex","key","cx","cy","isSelected","onMouseLeave","setState","onMouseEnter","opacity","generateLabel","ref","generateLink","extraProps","Bottom","cloneElement","push","Top","strokeLinecap","strokeOpacity","onContextMenu","isSmartRoutingApplicable","paths","directPathCoords","calculateDirectPath","first","last","smartLink","calculateLinkStartEndCoords","start","end","pathToStart","pathToEnd","simplifiedPath","calculateDynamicPath","onMouseDown","xOrY","pointLeft","pointRight","j","labelModel","defaultProps","smooth","generatePort","DefaultPortLabel","style","background","getClassName","PortWidget","AbstractFactory","parent","setParent","getSelectedEntities","selectionChanged","remove","entityRemoved","BaseModel","zoom","rendered","gridSize","isCanvasMoving","setGridSize","size","gridUpdated","getGridPosition","pos","deSerializeDiagram","nodeOb","addNode","linkOb","addLink","serializeDiagram","clearSelection","ignore","isArray","filters","items","uniq","includes","zoomUpdated","setIsCanvasMoving","value","offsetUpdated","setOffsetX","setOffsetY","getIsCanvasMoving","getNode","addAll","models","removeLink","linksUpdated","isCreated","removeNode","nodesUpdated","getNodes","linkType","extras","p","target","getPortFromID","source","setPoints","getPoints","isLastPoint","getPointIndex","indexOf","getPointModel","getPortForPoint","getFirstPoint","getLastPoint","getPointForPort","sourcePortChanged","getSourcePort","getTargetPort","targetPortChanged","removePoint","pointModel","splice","removePointsBefore","removePointsAfter","removeMiddlePoints","nodeType","setPosition","oldX","oldY","portOb","getPort","removePort","updateDimensions","isConnectedToPort","updateLocation","getX","getY","maximumLinks","parentNode","getMaximumLinks","setMaximumLinks","isFinite","numberOfLinks","updateCoords","pathFinderInstance","PF","JumpPointFinder","heuristic","Heuristic","manhattan","diagonalMovement","DiagonalMovement","Never","instance","from","to","grid","Grid","findPath","startIndex","findIndex","endIndex","dynamicPath","Util","compressPath","baseClass","Component","onKeyUpPointer","onMouseMove","onMouseUp","action","wasMoved","renderedNodes","windowListener","diagramEngineListener","componentWillUnmount","removeEventListener","getElementById","preventPageZoom","componentWillReceiveProps","nextProps","componentWillUpdate","onKeyUp","addEventListener","focus","passive","getMouseElement","nodeElement","getAttribute","fireAction","actionStillFiring","stopFiringAction","shouldSkipEvent","actionStoppedFiring","startFiringAction","actionStartedFiring","relative","allSelected","disableNodeMove","portCoords","onMovingSingle","onMovingSingle2","allowCanvasTranslation","tagName","blockDelete","deleteKeys","keyCode","nodeLink","forwardLink","pointLink","diagramLinks","toolType","isData","portType","matchingPortId","portKeys","Object","keys","k","matchPort","shouldAddLink","allModels","graphAlreadyHasLink","allowLooseLinks","onMoveFinished","drawSelectionBox","ctrlKey","preventDefault","onWheel","allowCanvasZoom","oldZoomFactor","scrollDelta","inverseZoom","deltaY","boundingRect","currentTarget","widthDiff","heightDiff","moveAction","onMoveStart","LinkLayerWidget","NodeLayerWidget","Infinity","DiagramWidget","shouldComponentUpdate","children","LinkWidget","draw","stopDraw","NodeWidget","transform","LinkLayerWidgetInner","Fragment","portCenter","generatedLink","updateNodeDimensions","NodeLayerWidgetInner","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call"],"mappings":"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","file":"main.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"storm-react-diagrams\"] = factory();\n\telse\n\t\troot[\"storm-react-diagrams\"] = factory();\n})(self, function() {\nreturn ","import { Toolkit } from \"./Toolkit\";\nimport * as _ from \"lodash\";\nimport { DiagramEngine } from \"./DiagramEngine\";\n\n/**\n * @author Dylan Vorster\n */\nexport interface BaseEvent<T extends BaseEntity = any> {\n\tentity: BaseEntity<BaseListener>;\n\tstopPropagation: () => any;\n\tfiring: boolean;\n\tid: string;\n}\n\nexport interface BaseListener<T extends BaseEntity = any> {\n\tlockChanged?(event: BaseEvent<T> & { locked: boolean }): void;\n}\n\nexport type BaseEntityType = \"node\" | \"link\" | \"port\" | \"point\";\n\nexport class BaseEntity<T extends BaseListener = BaseListener> {\n\tpublic listeners: { [s: string]: T };\n\tpublic id: string;\n\tpublic locked: boolean;\n\n\tconstructor(id?: string) {\n\t\tthis.listeners = {};\n\t\tthis.id = id || Toolkit.UID();\n\t\tthis.locked = false;\n\t}\n\n\tgetID() {\n\t\treturn this.id;\n\t}\n\n\tdoClone(lookupTable: { [s: string]: any } = {}, clone: any) {\n\t\t/*noop*/\n\t}\n\n\tclone(lookupTable: { [s: string]: any } = {}) {\n\t\t// try and use an existing clone first\n\t\tif (lookupTable[this.id]) {\n\t\t\treturn lookupTable[this.id];\n\t\t}\n\t\tlet clone = _.clone(this);\n\t\tclone.id = Toolkit.UID();\n\t\tclone.clearListeners();\n\t\tlookupTable[this.id] = clone;\n\n\t\tthis.doClone(lookupTable, clone);\n\t\treturn clone;\n\t}\n\n\tclearListeners() {\n\t\tthis.listeners = {};\n\t}\n\n\tpublic deSerialize(data: { [s: string]: any }, engine: DiagramEngine) {\n\t\tthis.id = data.id;\n\t}\n\n\tpublic serialize() {\n\t\treturn {\n\t\t\tid: this.id\n\t\t};\n\t}\n\n\tpublic iterateListeners(cb: (t: T, event: BaseEvent) => any) {\n\t\tlet event: BaseEvent = {\n\t\t\tid: Toolkit.UID(),\n\t\t\tfiring: true,\n\t\t\tentity: this,\n\t\t\tstopPropagation: () => {\n\t\t\t\tevent.firing = false;\n\t\t\t}\n\t\t};\n\n\t\tfor (var i in this.listeners) {\n\t\t\tif (this.listeners.hasOwnProperty(i)) {\n\t\t\t\t// propagation stopped\n\t\t\t\tif (!event.firing) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tcb(this.listeners[i], event);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic removeListener(listener: string) {\n\t\tif (this.listeners[listener]) {\n\t\t\tdelete this.listeners[listener];\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic addListener(listener: T): string {\n\t\tvar uid = Toolkit.UID();\n\t\tthis.listeners[uid] = listener;\n\t\treturn uid;\n\t}\n\n\tpublic isLocked(): boolean {\n\t\treturn this.locked;\n\t}\n\n\tpublic setLocked(locked: boolean = true) {\n\t\tthis.locked = locked;\n\t\tthis.iterateListeners((listener, event) => {\n\t\t\tif (listener.lockChanged) {\n\t\t\t\tlistener.lockChanged({ ...event, locked: locked });\n\t\t\t}\n\t\t});\n\t}\n}\n","import { BaseEntity, BaseListener } from \"./BaseEntity\";\nimport { DiagramModel } from \"./models/DiagramModel\";\nimport * as _ from \"lodash\";\nimport { BaseModel, BaseModelListener } from \"./models/BaseModel\";\nimport { NodeModel } from \"./models/NodeModel\";\nimport { PointModel } from \"./models/PointModel\";\nimport { PortModel } from \"./models/PortModel\";\nimport { LinkModel } from \"./models/LinkModel\";\nimport { AbstractLabelFactory } from \"./factories/AbstractLabelFactory\";\nimport { AbstractLinkFactory } from \"./factories/AbstractLinkFactory\";\nimport { AbstractNodeFactory } from \"./factories/AbstractNodeFactory\";\nimport { AbstractPortFactory } from \"./factories/AbstractPortFactory\";\nimport { DefaultLinkFactory, DefaultNodeFactory } from \"./main\";\nimport { ROUTING_SCALING_FACTOR } from \"./routing/PathFinding\";\nimport { DefaultPortFactory } from \"./defaults/factories/DefaultPortFactory\";\nimport { LabelModel } from \"./models/LabelModel\";\nimport { DefaultLabelFactory } from \"./defaults/factories/DefaultLabelFactory\";\nimport { Toolkit } from \"./Toolkit\";\n/**\n * @author Dylan Vorster\n */\nexport interface DiagramEngineListener extends BaseListener {\n\tportFactoriesUpdated?(): void;\n\n\tnodeFactoriesUpdated?(): void;\n\n\tlinkFactoriesUpdated?(): void;\n\n\tlabelFactoriesUpdated?(): void;\n\n\trepaintCanvas?(): void;\n}\n\n/**\n * Passed as a parameter to the DiagramWidget\n */\nexport class DiagramEngine extends BaseEntity<DiagramEngineListener> {\n\tnodeFactories: { [s: string]: AbstractNodeFactory };\n\tlinkFactories: { [s: string]: AbstractLinkFactory };\n\tportFactories: { [s: string]: AbstractPortFactory };\n\tlabelFactories: { [s: string]: AbstractLabelFactory };\n\n\tdiagramModel: DiagramModel;\n\tcanvas: Element;\n\tpaintableWidgets: {};\n\tlinksThatHaveInitiallyRendered: {};\n\tnodesRendered: boolean;\n\tmaxNumberPointsPerLink: number;\n\tsmartRouting: boolean;\n\n\t// calculated only when smart routing is active\n\tcanvasMatrix: number[][] = [];\n\troutingMatrix: number[][] = [];\n\t// used when at least one element has negative coordinates\n\thAdjustmentFactor: number = 0;\n\tvAdjustmentFactor: number = 0;\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.diagramModel = new DiagramModel();\n\t\tthis.nodeFactories = {};\n\t\tthis.linkFactories = {};\n\t\tthis.portFactories = {};\n\t\tthis.labelFactories = {};\n\t\tthis.canvas = null;\n\t\tthis.paintableWidgets = null;\n\t\tthis.linksThatHaveInitiallyRendered = {};\n\n\t\tif (Toolkit.TESTING) {\n\t\t\tToolkit.TESTING_UID = 0;\n\n\t\t\t//pop it onto the window so our E2E helpers can find it\n\t\t\tif (window) {\n\t\t\t\t(window as any)[\"diagram_instance\"] = this;\n\t\t\t}\n\t\t}\n\t}\n\n\tinstallDefaultFactories() {\n\t\tthis.registerNodeFactory(new DefaultNodeFactory());\n\t\tthis.registerLinkFactory(new DefaultLinkFactory());\n\t\tthis.registerPortFactory(new DefaultPortFactory());\n\t\tthis.registerLabelFactory(new DefaultLabelFactory());\n\t}\n\n\trepaintCanvas() {\n\t\tthis.iterateListeners(listener => {\n\t\t\tif (listener.repaintCanvas) {\n\t\t\t\tlistener.repaintCanvas();\n\t\t\t}\n\t\t});\n\t}\n\n\tclearRepaintEntities() {\n\t\tthis.paintableWidgets = null;\n\t}\n\n\tenableRepaintEntities(entities: BaseModel<BaseEntity, BaseModelListener>[]) {\n\t\tthis.paintableWidgets = {};\n\t\tentities.forEach(entity => {\n\t\t\t//if a node is requested to repaint, add all of its links\n\t\t\tif (entity instanceof NodeModel) {\n\t\t\t\t_.forEach(entity.getPorts(), port => {\n\t\t\t\t\t_.forEach(port.getLinks(), link => {\n\t\t\t\t\t\tthis.paintableWidgets[link.getID()] = true;\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (entity instanceof PointModel) {\n\t\t\t\tthis.paintableWidgets[entity.getLink().getID()] = true;\n\t\t\t}\n\n\t\t\tthis.paintableWidgets[entity.getID()] = true;\n\t\t});\n\t}\n\n\t/**\n\t * Checks to see if a model is locked by running through\n\t * its parents to see if they are locked first\n\t */\n\tisModelLocked(model: BaseEntity<BaseListener>) {\n\t\t//always check the diagram model\n\t\tif (this.diagramModel.isLocked()) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn model.isLocked();\n\t}\n\n\trecalculatePortsVisually() {\n\t\tthis.nodesRendered = false;\n\t\tthis.linksThatHaveInitiallyRendered = {};\n\t}\n\n\tcanEntityRepaint(baseModel: BaseModel<BaseEntity, BaseModelListener>) {\n\t\t//no rules applied, allow repaint\n\t\tif (this.paintableWidgets === null) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn this.paintableWidgets[baseModel.getID()] !== undefined;\n\t}\n\n\tsetCanvas(canvas: Element | null) {\n\t\tthis.canvas = canvas;\n\t}\n\n\tsetDiagramModel(model: DiagramModel) {\n\t\tthis.diagramModel = model;\n\t\tthis.recalculatePortsVisually();\n\t}\n\n\tgetDiagramModel(): DiagramModel {\n\t\treturn this.diagramModel;\n\t}\n\n\t//!-------------- FACTORIES ------------\n\n\tgetNodeFactories(): { [s: string]: AbstractNodeFactory } {\n\t\treturn this.nodeFactories;\n\t}\n\n\tgetLinkFactories(): { [s: string]: AbstractLinkFactory } {\n\t\treturn this.linkFactories;\n\t}\n\n\tgetLabelFactories(): { [s: string]: AbstractLabelFactory } {\n\t\treturn this.labelFactories;\n\t}\n\n\tregisterLabelFactory(factory: AbstractLabelFactory) {\n\t\tthis.labelFactories[factory.getType()] = factory;\n\t\tthis.iterateListeners(listener => {\n\t\t\tif (listener.labelFactoriesUpdated) {\n\t\t\t\tlistener.labelFactoriesUpdated();\n\t\t\t}\n\t\t});\n\t}\n\n\tregisterPortFactory(factory: AbstractPortFactory) {\n\t\tthis.portFactories[factory.getType()] = factory;\n\t\tthis.iterateListeners(listener => {\n\t\t\tif (listener.portFactoriesUpdated) {\n\t\t\t\tlistener.portFactoriesUpdated();\n\t\t\t}\n\t\t});\n\t}\n\n\tregisterNodeFactory(factory: AbstractNodeFactory) {\n\t\tthis.nodeFactories[factory.getType()] = factory;\n\t\tthis.iterateListeners(listener => {\n\t\t\tif (listener.nodeFactoriesUpdated) {\n\t\t\t\tlistener.nodeFactoriesUpdated();\n\t\t\t}\n\t\t});\n\t}\n\n\tregisterLinkFactory(factory: AbstractLinkFactory) {\n\t\tthis.linkFactories[factory.getType()] = factory;\n\t\tthis.iterateListeners(listener => {\n\t\t\tif (listener.linkFactoriesUpdated) {\n\t\t\t\tlistener.linkFactoriesUpdated();\n\t\t\t}\n\t\t});\n\t}\n\n\tgetPortFactory(type: string): AbstractPortFactory {\n\t\tif (this.portFactories[type]) {\n\t\t\treturn this.portFactories[type];\n\t\t}\n\t\tthrow new Error(`cannot find factory for port of type: [${type}]`);\n\t}\n\n\tgetNodeFactory(type: string): AbstractNodeFactory {\n\t\tif (this.nodeFactories[type]) {\n\t\t\treturn this.nodeFactories[type];\n\t\t}\n\t\tthrow new Error(`cannot find factory for node of type: [${type}]`);\n\t}\n\n\tgetLinkFactory(type: string): AbstractLinkFactory {\n\t\tif (this.linkFactories[type]) {\n\t\t\treturn this.linkFactories[type];\n\t\t}\n\t\tthrow new Error(`cannot find factory for link of type: [${type}]`);\n\t}\n\n\tgetLabelFactory(type: string): AbstractLabelFactory {\n\t\tif (this.labelFactories[type]) {\n\t\t\treturn this.labelFactories[type];\n\t\t}\n\t\tthrow new Error(`cannot find factory for label of type: [${type}]`);\n\t}\n\n\tgetFactoryForNode(node: NodeModel): AbstractNodeFactory | null {\n\t\treturn this.getNodeFactory(node.getType());\n\t}\n\n\tgetFactoryForLink(link: LinkModel): AbstractLinkFactory | null {\n\t\treturn this.getLinkFactory(link.getType());\n\t}\n\n\tgetFactoryForLabel(label: LabelModel): AbstractLabelFactory | null {\n\t\treturn this.getLabelFactory(label.getType());\n\t}\n\n\tgenerateWidgetForLink(link: LinkModel): JSX.Element | null {\n\t\tvar linkFactory = this.getFactoryForLink(link);\n\t\tif (!linkFactory) {\n\t\t\tthrow new Error(\"Cannot find link factory for link: \" + link.getType());\n\t\t}\n\t\treturn linkFactory.generateReactWidget(this, link);\n\t}\n\n\tgenerateWidgetForNode(node: NodeModel): JSX.Element | null {\n\t\tvar nodeFactory = this.getFactoryForNode(node);\n\t\tif (!nodeFactory) {\n\t\t\tthrow new Error(\"Cannot find widget factory for node: \" + node.getType());\n\t\t}\n\t\treturn nodeFactory.generateReactWidget(this, node);\n\t}\n\n\tgetRelativeMousePoint(event): { x: number; y: number } {\n\t\tvar point = this.getRelativePoint(event.clientX, event.clientY);\n\t\treturn {\n\t\t\tx: (point.x - this.diagramModel.getOffsetX()) / (this.diagramModel.getZoomLevel() / 100.0),\n\t\t\ty: (point.y - this.diagramModel.getOffsetY()) / (this.diagramModel.getZoomLevel() / 100.0)\n\t\t};\n\t}\n\n\tgetRelativePoint(x, y) {\n\t\tvar canvasRect = this.canvas.getBoundingClientRect();\n\t\treturn { x: x - canvasRect.left, y: y - canvasRect.top };\n\t}\n\n\tgetNodeElement(node: NodeModel): Element {\n\t\tconst selector = this.canvas.querySelector(`.node[data-nodeid=\"${node.getID()}\"]`);\n\t\tif (selector === null) {\n\t\t\tthrow new Error(\"Cannot find Node element with nodeID: [\" + node.getID() + \"]\");\n\t\t}\n\t\treturn selector;\n\t}\n\n\tgetNodePortElement(port: PortModel): any {\n\t\tvar selector = this.canvas.querySelector(\n\t\t\t`.port[data-name=\"${port.getName()}\"][data-nodeid=\"${port.getParent().getID()}\"]`\n\t\t);\n\t\tif (selector === null) {\n\t\t\tthrow new Error(\n\t\t\t\t\"Cannot find Node Port element with nodeID: [\" +\n\t\t\t\t\tport.getParent().getID() +\n\t\t\t\t\t\"] and name: [\" +\n\t\t\t\t\tport.getName() +\n\t\t\t\t\t\"]\"\n\t\t\t);\n\t\t}\n\t\treturn selector;\n\t}\n\n\tgetPortCenter(port: PortModel) {\n\t\tvar sourceElement = this.getNodePortElement(port);\n\t\tvar sourceRect = sourceElement.getBoundingClientRect();\n\n\t\tvar rel = this.getRelativePoint(sourceRect.left, sourceRect.top);\n\n\t\treturn {\n\t\t\tx:\n\t\t\t\tsourceElement.offsetWidth / 2 +\n\t\t\t\t(rel.x - this.diagramModel.getOffsetX()) / (this.diagramModel.getZoomLevel() / 100.0),\n\t\t\ty:\n\t\t\t\tsourceElement.offsetHeight / 2 +\n\t\t\t\t(rel.y - this.diagramModel.getOffsetY()) / (this.diagramModel.getZoomLevel() / 100.0)\n\t\t};\n\t}\n\n\t/**\n\t * Calculate rectangular coordinates of the port passed in.\n\t */\n\tgetPortCoords(\n\t\tport: PortModel\n\t): {\n\t\tx: number;\n\t\ty: number;\n\t\twidth: number;\n\t\theight: number;\n\t} {\n\t\tconst sourceElement = this.getNodePortElement(port);\n\t\tconst sourceRect = sourceElement.getBoundingClientRect();\n\t\tconst canvasRect = this.canvas.getBoundingClientRect() as ClientRect;\n\n\t\treturn {\n\t\t\tx:\n\t\t\t\t(sourceRect.x - this.diagramModel.getOffsetX()) / (this.diagramModel.getZoomLevel() / 100.0) -\n\t\t\t\tcanvasRect.left,\n\t\t\ty:\n\t\t\t\t(sourceRect.y - this.diagramModel.getOffsetY()) / (this.diagramModel.getZoomLevel() / 100.0) -\n\t\t\t\tcanvasRect.top,\n\t\t\twidth: sourceRect.width,\n\t\t\theight: sourceRect.height\n\t\t};\n\t}\n\n\t/**\n\t * Determine the width and height of the node passed in.\n\t * It currently assumes nodes have a rectangular shape, can be overriden for customised shapes.\n\t */\n\tgetNodeDimensions(node: NodeModel): { width: number; height: number } {\n\t\tif (!this.canvas) {\n\t\t\treturn {\n\t\t\t\twidth: 0,\n\t\t\t\theight: 0\n\t\t\t};\n\t\t}\n\n\t\tconst nodeElement = this.getNodeElement(node);\n\t\tconst nodeRect = nodeElement.getBoundingClientRect();\n\n\t\treturn {\n\t\t\twidth: nodeRect.width,\n\t\t\theight: nodeRect.height\n\t\t};\n\t}\n\n\tgetMaxNumberPointsPerLink(): number {\n\t\treturn this.maxNumberPointsPerLink;\n\t}\n\n\tsetMaxNumberPointsPerLink(max: number) {\n\t\tthis.maxNumberPointsPerLink = max;\n\t}\n\n\tisSmartRoutingEnabled() {\n\t\treturn !!this.smartRouting;\n\t}\n\tsetSmartRoutingStatus(status: boolean) {\n\t\tthis.smartRouting = status;\n\t}\n\n\t/**\n\t * A representation of the canvas in the following format:\n\t *\n\t * +-----------------+\n\t * | 0 0 0 0 0 0 0 0 |\n\t * | 0 0 0 0 0 0 0 0 |\n\t * | 0 0 0 0 0 0 0 0 |\n\t * | 0 0 0 0 0 0 0 0 |\n\t * | 0 0 0 0 0 0 0 0 |\n\t * +-----------------+\n\t *\n\t * In which all walkable points are marked by zeros.\n\t * It uses @link{#ROUTING_SCALING_FACTOR} to reduce the matrix dimensions and improve performance.\n\t */\n\tgetCanvasMatrix(): number[][] {\n\t\tif (this.canvasMatrix.length === 0) {\n\t\t\tthis.calculateCanvasMatrix();\n\t\t}\n\n\t\treturn this.canvasMatrix;\n\t}\n\tcalculateCanvasMatrix() {\n\t\tconst {\n\t\t\twidth: canvasWidth,\n\t\t\thAdjustmentFactor,\n\t\t\theight: canvasHeight,\n\t\t\tvAdjustmentFactor\n\t\t} = this.calculateMatrixDimensions();\n\n\t\tthis.hAdjustmentFactor = hAdjustmentFactor;\n\t\tthis.vAdjustmentFactor = vAdjustmentFactor;\n\n\t\tconst matrixWidth = Math.ceil(canvasWidth / ROUTING_SCALING_FACTOR);\n\t\tconst matrixHeight = Math.ceil(canvasHeight / ROUTING_SCALING_FACTOR);\n\n\t\tthis.canvasMatrix = _.range(0, matrixHeight).map(() => {\n\t\t\treturn new Array(matrixWidth).fill(0);\n\t\t});\n\t}\n\n\t/**\n\t * A representation of the canvas in the following format:\n\t *\n\t * +-----------------+\n\t * | 0 0 1 1 0 0 0 0 |\n\t * | 0 0 1 1 0 0 1 1 |\n\t * | 0 0 0 0 0 0 1 1 |\n\t * | 1 1 0 0 0 0 0 0 |\n\t * | 1 1 0 0 0 0 0 0 |\n\t * +-----------------+\n\t *\n\t * In which all points blocked by a node (and its ports) are\n\t * marked as 1; points were there is nothing (ie, free) receive 0.\n\t */\n\tgetRoutingMatrix(): number[][] {\n\t\tif (this.routingMatrix.length === 0) {\n\t\t\tthis.calculateRoutingMatrix();\n\t\t}\n\n\t\treturn this.routingMatrix;\n\t}\n\tcalculateRoutingMatrix(): void {\n\t\tconst matrix = _.cloneDeep(this.getCanvasMatrix());\n\n\t\t// nodes need to be marked as blocked points\n\t\tthis.markNodes(matrix);\n\t\t// same thing for ports\n\t\tthis.markPorts(matrix);\n\n\t\tthis.routingMatrix = matrix;\n\t}\n\n\t/**\n\t * The routing matrix does not have negative indexes, but elements could be negatively positioned.\n\t * We use the functions below to translate back and forth between these coordinates, relying on the\n\t * calculated values of hAdjustmentFactor and vAdjustmentFactor.\n\t */\n\ttranslateRoutingX(x: number, reverse: boolean = false) {\n\t\treturn x + this.hAdjustmentFactor * (reverse ? -1 : 1);\n\t}\n\ttranslateRoutingY(y: number, reverse: boolean = false) {\n\t\treturn y + this.vAdjustmentFactor * (reverse ? -1 : 1);\n\t}\n\n\t/**\n\t * Despite being a long method, we simply iterate over all three collections (nodes, ports and points)\n\t * to find the highest X and Y dimensions, so we can build the matrix large enough to contain all elements.\n\t */\n\tcalculateMatrixDimensions = (): {\n\t\twidth: number;\n\t\thAdjustmentFactor: number;\n\t\theight: number;\n\t\tvAdjustmentFactor: number;\n\t} => {\n\t\tconst allNodesCoords = _.values(this.diagramModel.nodes).map(item => ({\n\t\t\tx: item.x,\n\t\t\twidth: item.width,\n\t\t\ty: item.y,\n\t\t\theight: item.height\n\t\t}));\n\n\t\tconst allLinks = _.values(this.diagramModel.links);\n\t\tconst allPortsCoords = _.flatMap(allLinks.map(link => [link.sourcePort, link.targetPort]))\n\t\t\t.filter(port => port !== null)\n\t\t\t.map(item => ({\n\t\t\t\tx: item.x,\n\t\t\t\twidth: item.width,\n\t\t\t\ty: item.y,\n\t\t\t\theight: item.height\n\t\t\t}));\n\t\tconst allPointsCoords = _.flatMap(allLinks.map(link => link.points)).map(item => ({\n\t\t\t// points don't have width/height, so let's just use 0\n\t\t\tx: item.x,\n\t\t\twidth: 0,\n\t\t\ty: item.y,\n\t\t\theight: 0\n\t\t}));\n\n\t\tconst canvas = this.canvas as HTMLDivElement;\n\t\tconst minX =\n\t\t\tMath.floor(\n\t\t\t\tMath.min(_.minBy(_.concat(allNodesCoords, allPortsCoords, allPointsCoords), item => item.x).x, 0) /\n\t\t\t\t\tROUTING_SCALING_FACTOR\n\t\t\t) * ROUTING_SCALING_FACTOR;\n\t\tconst maxXElement = _.maxBy(\n\t\t\t_.concat(allNodesCoords, allPortsCoords, allPointsCoords),\n\t\t\titem => item.x + item.width\n\t\t);\n\t\tconst maxX = Math.max(maxXElement.x + maxXElement.width, canvas.offsetWidth);\n\n\t\tconst minY =\n\t\t\tMath.floor(\n\t\t\t\tMath.min(_.minBy(_.concat(allNodesCoords, allPortsCoords, allPointsCoords), item => item.y).y, 0) /\n\t\t\t\t\tROUTING_SCALING_FACTOR\n\t\t\t) * ROUTING_SCALING_FACTOR;\n\t\tconst maxYElement = _.maxBy(\n\t\t\t_.concat(allNodesCoords, allPortsCoords, allPointsCoords),\n\t\t\titem => item.y + item.height\n\t\t);\n\t\tconst maxY = Math.max(maxYElement.y + maxYElement.height, canvas.offsetHeight);\n\n\t\treturn {\n\t\t\twidth: Math.ceil(Math.abs(minX) + maxX),\n\t\t\thAdjustmentFactor: Math.abs(minX) / ROUTING_SCALING_FACTOR + 1,\n\t\t\theight: Math.ceil(Math.abs(minY) + maxY),\n\t\t\tvAdjustmentFactor: Math.abs(minY) / ROUTING_SCALING_FACTOR + 1\n\t\t};\n\t};\n\n\t/**\n\t * Updates (by reference) where nodes will be drawn on the matrix passed in.\n\t */\n\tmarkNodes = (matrix: number[][]): void => {\n\t\t_.values(this.diagramModel.nodes).forEach(node => {\n\t\t\tconst startX = Math.floor(node.x / ROUTING_SCALING_FACTOR);\n\t\t\tconst endX = Math.ceil((node.x + node.width) / ROUTING_SCALING_FACTOR);\n\t\t\tconst startY = Math.floor(node.y / ROUTING_SCALING_FACTOR);\n\t\t\tconst endY = Math.ceil((node.y + node.height) / ROUTING_SCALING_FACTOR);\n\n\t\t\tfor (let x = startX - 1; x <= endX + 1; x++) {\n\t\t\t\tfor (let y = startY - 1; y < endY + 1; y++) {\n\t\t\t\t\tthis.markMatrixPoint(matrix, this.translateRoutingX(x), this.translateRoutingY(y));\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n\n\t/**\n\t * Updates (by reference) where ports will be drawn on the matrix passed in.\n\t */\n\tmarkPorts = (matrix: number[][]): void => {\n\t\tconst allElements = _.flatMap(\n\t\t\t_.values(this.diagramModel.links).map(link => [].concat(link.sourcePort, link.targetPort))\n\t\t);\n\t\tallElements.filter(port => port !== null).forEach(port => {\n\t\t\tconst startX = Math.floor(port.x / ROUTING_SCALING_FACTOR);\n\t\t\tconst endX = Math.ceil((port.x + port.width) / ROUTING_SCALING_FACTOR);\n\t\t\tconst startY = Math.floor(port.y / ROUTING_SCALING_FACTOR);\n\t\t\tconst endY = Math.ceil((port.y + port.height) / ROUTING_SCALING_FACTOR);\n\n\t\t\tfor (let x = startX - 1; x <= endX + 1; x++) {\n\t\t\t\tfor (let y = startY - 1; y < endY + 1; y++) {\n\t\t\t\t\tthis.markMatrixPoint(matrix, this.translateRoutingX(x), this.translateRoutingY(y));\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n\n\tmarkMatrixPoint = (matrix: number[][], x: number, y: number) => {\n\t\tif (matrix[y] !== undefined && matrix[y][x] !== undefined) {\n\t\t\tmatrix[y][x] = 1;\n\t\t}\n\t};\n\n\tzoomToFit() {\n\t\tconst xFactor = this.canvas.clientWidth / this.canvas.scrollWidth;\n\t\tconst yFactor = this.canvas.clientHeight / this.canvas.scrollHeight;\n\t\tconst zoomFactor = xFactor < yFactor ? xFactor : yFactor;\n\n\t\tthis.diagramModel.setZoomLevel(this.diagramModel.getZoomLevel() * zoomFactor);\n\t\tthis.diagramModel.setOffset(0, 0);\n\t\tthis.repaintCanvas();\n\t}\n}\n","// tslint:disable no-bitwise\nimport closest = require(\"closest\");\nimport { PointModel } from \"./models/PointModel\";\nimport { ROUTING_SCALING_FACTOR } from \"./routing/PathFinding\";\nimport * as Path from \"paths-js/path\";\n/**\n * @author Dylan Vorster\n */\nexport class Toolkit {\n\tstatic TESTING: boolean = false;\n\tstatic TESTING_UID = 0;\n\n\t/**\n\t * Generats a unique ID (thanks Stack overflow :3)\n\t * @returns {String}\n\t */\n\tpublic static UID(): string {\n\t\tif (Toolkit.TESTING) {\n\t\t\tToolkit.TESTING_UID++;\n\t\t\treturn \"\" + Toolkit.TESTING_UID;\n\t\t}\n\t\treturn \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, c => {\n\t\t\tconst r = (Math.random() * 16) | 0;\n\t\t\tconst v = c === \"x\" ? r : (r & 0x3) | 0x8;\n\t\t\treturn v.toString(16);\n\t\t});\n\t}\n\n\t/**\n\t * Finds the closest element as a polyfill\n\t *\n\t * @param  {Element} element  [description]\n\t * @param  {string}  selector [description]\n\t */\n\tpublic static closest(element: Element, selector: string) {\n\t\tif (document.body.closest) {\n\t\t\treturn element.closest(selector);\n\t\t}\n\t\treturn closest(element, selector);\n\t}\n\n\tpublic static generateLinePath(firstPoint: PointModel, lastPoint: PointModel): string {\n\t\treturn `M${firstPoint.x},${firstPoint.y} L ${lastPoint.x},${lastPoint.y}`;\n\t}\n\n\tpublic static generateCurvePath(firstPoint: PointModel, lastPoint: PointModel, curvy: number = 0): string {\n\t\tvar isHorizontal = Math.abs(firstPoint.x - lastPoint.x) > Math.abs(firstPoint.y - lastPoint.y);\n\t\tvar curvyX = isHorizontal ? curvy : 0;\n\t\tvar curvyY = isHorizontal ? 0 : curvy;\n\n\t\treturn `M${firstPoint.x},${firstPoint.y} C ${firstPoint.x + curvyX},${firstPoint.y + curvyY}\n    ${lastPoint.x - curvyX},${lastPoint.y - curvyY} ${lastPoint.x},${lastPoint.y}`;\n\t}\n\n\tpublic static generateDynamicPath(pathCoords: number[][]) {\n\t\tlet path = Path();\n\t\tpath = path.moveto(pathCoords[0][0] * ROUTING_SCALING_FACTOR, pathCoords[0][1] * ROUTING_SCALING_FACTOR);\n\t\tpathCoords.slice(1).forEach(coords => {\n\t\t\tpath = path.lineto(coords[0] * ROUTING_SCALING_FACTOR, coords[1] * ROUTING_SCALING_FACTOR);\n\t\t});\n\t\treturn path.print();\n\t}\n}\n","export class BaseAction {\n\tmouseX: number;\n\tmouseY: number;\n\tms: number;\n\n\tconstructor(mouseX: number, mouseY: number) {\n\t\tthis.mouseX = mouseX;\n\t\tthis.mouseY = mouseY;\n\t\tthis.ms = new Date().getTime();\n\t}\n}\n","import { BaseAction } from \"./BaseAction\";\nimport { DiagramModel } from \"../models/DiagramModel\";\n\nexport class MoveCanvasAction extends BaseAction {\n\tinitialOffsetX: number;\n\tinitialOffsetY: number;\n\n\tconstructor(mouseX: number, mouseY: number, diagramModel: DiagramModel) {\n\t\tsuper(mouseX, mouseY);\n\t\tthis.initialOffsetX = diagramModel.getOffsetX();\n\t\tthis.initialOffsetY = diagramModel.getOffsetY();\n\t}\n}\n","import { BaseAction } from \"./BaseAction\";\nimport { SelectionModel } from \"../models/SelectionModel\";\nimport { PointModel } from \"../models/PointModel\";\nimport { NodeModel } from \"../models/NodeModel\";\nimport { DiagramEngine } from \"../DiagramEngine\";\n\nexport class MoveItemsAction extends BaseAction {\n\tselectionModels: SelectionModel[];\n\tmoved: boolean;\n\n\tconstructor(mouseX: number, mouseY: number, diagramEngine: DiagramEngine) {\n\t\tsuper(mouseX, mouseY);\n\t\tthis.moved = false;\n\t\tdiagramEngine.enableRepaintEntities(diagramEngine.getDiagramModel().getSelectedItems());\n\t\tvar selectedItems = diagramEngine.getDiagramModel().getSelectedItems();\n\n\t\t//dont allow items which are locked to move\n\t\tselectedItems = selectedItems.filter(item => {\n\t\t\treturn !diagramEngine.isModelLocked(item);\n\t\t});\n\n\t\tthis.selectionModels = selectedItems.map((item: PointModel | NodeModel) => {\n\t\t\treturn {\n\t\t\t\tmodel: item,\n\t\t\t\tinitialX: item.x,\n\t\t\t\tinitialY: item.y\n\t\t\t};\n\t\t});\n\t}\n}\n","import { BaseAction } from \"./BaseAction\";\nimport { DiagramModel } from \"../models/DiagramModel\";\n\nexport class SelectingAction extends BaseAction {\n\tmouseX2: number;\n\tmouseY2: number;\n\n\tconstructor(mouseX: number, mouseY: number) {\n\t\tsuper(mouseX, mouseY);\n\t\tthis.mouseX2 = mouseX;\n\t\tthis.mouseY2 = mouseY;\n\t}\n\n\tgetBoxDimensions() {\n\t\treturn {\n\t\t\tleft: this.mouseX2 > this.mouseX ? this.mouseX : this.mouseX2,\n\t\t\ttop: this.mouseY2 > this.mouseY ? this.mouseY : this.mouseY2,\n\t\t\twidth: Math.abs(this.mouseX2 - this.mouseX),\n\t\t\theight: Math.abs(this.mouseY2 - this.mouseY),\n\t\t\tright: this.mouseX2 < this.mouseX ? this.mouseX : this.mouseX2,\n\t\t\tbottom: this.mouseY2 < this.mouseY ? this.mouseY : this.mouseY2\n\t\t};\n\t}\n\n\tcontainsElement(x: number, y: number, diagramModel: DiagramModel): boolean {\n\t\tvar z = diagramModel.getZoomLevel() / 100.0;\n\t\tlet dimensions = this.getBoxDimensions();\n\n\t\treturn (\n\t\t\tx * z + diagramModel.getOffsetX() > dimensions.left &&\n\t\t\tx * z + diagramModel.getOffsetX() < dimensions.right &&\n\t\t\ty * z + diagramModel.getOffsetY() > dimensions.top &&\n\t\t\ty * z + diagramModel.getOffsetY() < dimensions.bottom\n\t\t);\n\t}\n}\n","import * as React from \"react\";\nimport { DiagramEngine } from \"../../DiagramEngine\";\nimport { AbstractLabelFactory } from \"../../factories/AbstractLabelFactory\";\nimport { DefaultLabelModel } from \"../models/DefaultLabelModel\";\nimport { DefaultLabelWidget } from \"../widgets/DefaultLabelWidget\";\n\n/**\n * @author Dylan Vorster\n */\nexport class DefaultLabelFactory extends AbstractLabelFactory<DefaultLabelModel> {\n\tconstructor() {\n\t\tsuper(\"default\");\n\t}\n\n\tgenerateReactWidget(diagramEngine: DiagramEngine, label: DefaultLabelModel): JSX.Element {\n\t\treturn <DefaultLabelWidget model={label} />;\n\t}\n\n\tgetNewInstance(initialConfig?: any): DefaultLabelModel {\n\t\treturn new DefaultLabelModel();\n\t}\n}\n","import * as React from \"react\";\nimport { DefaultLinkWidget } from \"../widgets/DefaultLinkWidget\";\nimport { DiagramEngine } from \"../../DiagramEngine\";\nimport { AbstractLinkFactory } from \"../../factories/AbstractLinkFactory\";\nimport { DefaultLinkModel } from \"../models/DefaultLinkModel\";\n\n/**\n * @author Dylan Vorster\n */\nexport class DefaultLinkFactory extends AbstractLinkFactory<DefaultLinkModel> {\n\tconstructor() {\n\t\tsuper(\"default\");\n\t}\n\n\tgenerateReactWidget(diagramEngine: DiagramEngine, link: DefaultLinkModel): JSX.Element {\n\t\treturn React.createElement(DefaultLinkWidget, {\n\t\t\tlink: link,\n\t\t\tdiagramEngine: diagramEngine\n\t\t});\n\t}\n\n\tgetNewInstance(initialConfig?: any): DefaultLinkModel {\n\t\treturn new DefaultLinkModel();\n\t}\n\n\tgenerateLinkSegment(model: DefaultLinkModel, widget: DefaultLinkWidget, selected: boolean, path: string) {\n\t\treturn (\n\t\t\t<path\n\t\t\t\tclassName={selected ? widget.bem(\"--path-selected\") : \"\"}\n\t\t\t\tstrokeWidth={model.width}\n\t\t\t\tstroke={model.color}\n\t\t\t\td={path}\n\t\t\t/>\n\t\t);\n\t}\n}\n","import { DefaultNodeModel } from \"../models/DefaultNodeModel\";\nimport * as React from \"react\";\nimport { DefaultNodeWidget } from \"../widgets/DefaultNodeWidget\";\nimport { DiagramEngine } from \"../../DiagramEngine\";\nimport { AbstractNodeFactory } from \"../../factories/AbstractNodeFactory\";\n/**\n * @author Dylan Vorster\n */\nexport class DefaultNodeFactory extends AbstractNodeFactory<DefaultNodeModel> {\n\tconstructor() {\n\t\tsuper(\"default\");\n\t}\n\n\tgenerateReactWidget(diagramEngine: DiagramEngine, node: DefaultNodeModel): JSX.Element {\n\t\treturn React.createElement(DefaultNodeWidget, {\n\t\t\tnode: node,\n\t\t\tdiagramEngine: diagramEngine\n\t\t});\n\t}\n\n\tgetNewInstance(initialConfig?: any): DefaultNodeModel {\n\t\treturn new DefaultNodeModel();\n\t}\n}\n","import { DefaultPortModel } from \"../models/DefaultPortModel\";\nimport { AbstractPortFactory } from \"../../factories/AbstractPortFactory\";\n\nexport class DefaultPortFactory extends AbstractPortFactory<DefaultPortModel> {\n\tconstructor() {\n\t\tsuper(\"default\");\n\t}\n\n\tgetNewInstance(initialConfig?: any): DefaultPortModel {\n\t\treturn new DefaultPortModel(true, \"unknown\");\n\t}\n}\n","import { LabelModel } from \"../../models/LabelModel\";\n\nexport class DefaultLabelModel extends LabelModel {\n\tlabel: string;\n\n\tconstructor() {\n\t\tsuper(\"default\");\n\t\tthis.offsetY = -23;\n\t}\n\n\tsetLabel(label: string) {\n\t\tthis.label = label;\n\t}\n}\n","/**\n * @author Dylan Vorster\n */\nimport { LinkModel, LinkModelListener } from \"../../models/LinkModel\";\nimport { BaseEvent } from \"../../BaseEntity\";\nimport * as _ from \"lodash\";\nimport { PointModel } from \"../../models/PointModel\";\nimport { DiagramEngine } from \"../../DiagramEngine\";\nimport { DefaultLabelModel } from \"./DefaultLabelModel\";\nimport { LabelModel } from \"../../models/LabelModel\";\n\nexport interface DefaultLinkModelListener extends LinkModelListener {\n\tcolorChanged?(event: BaseEvent<DefaultLinkModel> & { color: null | string }): void;\n\n\twidthChanged?(event: BaseEvent<DefaultLinkModel> & { width: 0 | number }): void;\n}\n\nexport class DefaultLinkModel extends LinkModel<DefaultLinkModelListener> {\n\twidth: number;\n\tcolor: string;\n\tcurvyness: number;\n\n\tconstructor(type: string = \"default\") {\n\t\tsuper(type);\n\t\tthis.color = \"rgba(255,255,255,0.5)\";\n\t\tthis.width = 3;\n\t\tthis.curvyness = 50;\n\t}\n\n\tserialize() {\n\t\treturn _.merge(super.serialize(), {\n\t\t\twidth: this.width,\n\t\t\tcolor: this.color,\n\t\t\tcurvyness: this.curvyness\n\t\t});\n\t}\n\n\tdeSerialize(ob, engine: DiagramEngine) {\n\t\tsuper.deSerialize(ob, engine);\n\t\tthis.color = ob.color;\n\t\tthis.width = ob.width;\n\t\tthis.curvyness = ob.curvyness;\n\t}\n\n\taddLabel(label: LabelModel | string) {\n\t\tif (label instanceof LabelModel) {\n\t\t\treturn super.addLabel(label);\n\t\t}\n\t\tlet labelOb = new DefaultLabelModel();\n\t\tlabelOb.setLabel(label);\n\t\treturn super.addLabel(labelOb);\n\t}\n\n\tsetWidth(width: number) {\n\t\tthis.width = width;\n\t\tthis.iterateListeners((listener: DefaultLinkModelListener, event: BaseEvent) => {\n\t\t\tif (listener.widthChanged) {\n\t\t\t\tlistener.widthChanged({ ...event, width: width });\n\t\t\t}\n\t\t});\n\t}\n\n\tsetColor(color: string) {\n\t\tthis.color = color;\n\t\tthis.iterateListeners((listener: DefaultLinkModelListener, event: BaseEvent) => {\n\t\t\tif (listener.colorChanged) {\n\t\t\t\tlistener.colorChanged({ ...event, color: color });\n\t\t\t}\n\t\t});\n\t}\n}\n","import { DefaultPortModel } from \"./DefaultPortModel\";\nimport * as _ from \"lodash\";\n\nimport { NodeModel } from \"../../models/NodeModel\";\nimport { Toolkit } from \"../../Toolkit\";\nimport { DiagramEngine } from \"../../DiagramEngine\";\n\n/**\n * @author Dylan Vorster\n */\nexport class DefaultNodeModel extends NodeModel {\n\tname: string;\n\tcolor: string;\n\tports: { [s: string]: DefaultPortModel };\n\n\tconstructor(name: string = \"Untitled\", color: string = \"rgb(0,192,255)\") {\n\t\tsuper(\"default\");\n\t\tthis.name = name;\n\t\tthis.color = color;\n\t}\n\n\taddInPort(label: string): DefaultPortModel {\n\t\treturn this.addPort(new DefaultPortModel(true, Toolkit.UID(), label));\n\t}\n\n\taddOutPort(label: string): DefaultPortModel {\n\t\treturn this.addPort(new DefaultPortModel(false, Toolkit.UID(), label));\n\t}\n\n\tdeSerialize(object, engine: DiagramEngine) {\n\t\tsuper.deSerialize(object, engine);\n\t\tthis.name = object.name;\n\t\tthis.color = object.color;\n\t}\n\n\tserialize() {\n\t\treturn _.merge(super.serialize(), {\n\t\t\tname: this.name,\n\t\t\tcolor: this.color\n\t\t});\n\t}\n\n\tgetInPorts(): DefaultPortModel[] {\n\t\treturn _.filter(this.ports, portModel => {\n\t\t\treturn portModel.in;\n\t\t});\n\t}\n\n\tgetOutPorts(): DefaultPortModel[] {\n\t\treturn _.filter(this.ports, portModel => {\n\t\t\treturn !portModel.in;\n\t\t});\n\t}\n}\n","import * as _ from \"lodash\";\nimport { PortModel } from \"../../models/PortModel\";\nimport { DiagramEngine } from \"../../DiagramEngine\";\nimport { DefaultLinkModel } from \"./DefaultLinkModel\";\nimport { LinkModel } from \"../../models/LinkModel\";\n\nexport class DefaultPortModel extends PortModel {\n\tin: boolean;\n\tlabel: string;\n\tlinks: { [id: string]: DefaultLinkModel };\n\n\tconstructor(isInput: boolean, name: string, label: string = null, id?: string) {\n\t\tsuper(name, \"default\", id);\n\t\tthis.in = isInput;\n\t\tthis.label = label || name;\n\t}\n\n\tdeSerialize(object, engine: DiagramEngine) {\n\t\tsuper.deSerialize(object, engine);\n\t\tthis.in = object.in;\n\t\tthis.label = object.label;\n\t}\n\n\tserialize() {\n\t\treturn _.merge(super.serialize(), {\n\t\t\tin: this.in,\n\t\t\tlabel: this.label\n\t\t});\n\t}\n\n\tlink(port: PortModel): LinkModel {\n\t\tlet link = this.createLinkModel();\n\t\tlink.setSourcePort(this);\n\t\tlink.setTargetPort(port);\n\t\treturn link;\n\t}\n\n\tcanLinkToPort(port: PortModel): boolean {\n\t\tif (port instanceof DefaultPortModel) {\n\t\t\treturn this.in !== port.in;\n\t\t}\n\t\treturn true;\n\t}\n\n\tcreateLinkModel(): LinkModel {\n\t\tlet link = super.createLinkModel();\n\t\treturn link || new DefaultLinkModel();\n\t}\n}\n","import * as React from \"react\";\nimport { DefaultLabelModel } from \"../models/DefaultLabelModel\";\nimport { BaseWidget, BaseWidgetProps } from \"../../widgets/BaseWidget\";\n\nexport interface DefaultLabelWidgetProps extends BaseWidgetProps {\n\tmodel: DefaultLabelModel;\n}\n\nexport class DefaultLabelWidget extends BaseWidget<DefaultLabelWidgetProps> {\n\tconstructor(props) {\n\t\tsuper(\"srd-default-label\", props);\n\t}\n\n\trender() {\n\t\treturn <div {...this.getProps()}>{this.props.model.label}</div>;\n\t}\n}\n","import * as React from \"react\";\nimport { DiagramEngine } from \"../../DiagramEngine\";\nimport { PointModel } from \"../../models/PointModel\";\nimport { Toolkit } from \"../../Toolkit\";\nimport { DefaultLinkFactory } from \"../factories/DefaultLinkFactory\";\nimport { DefaultLinkModel } from \"../models/DefaultLinkModel\";\nimport PathFinding from \"../../routing/PathFinding\";\nimport * as _ from \"lodash\";\nimport { LabelModel } from \"../../models/LabelModel\";\nimport { BaseWidget, BaseWidgetProps } from \"../../widgets/BaseWidget\";\n\nexport interface DefaultLinkProps extends BaseWidgetProps {\n\tcolor?: string;\n\twidth?: number;\n\tsmooth?: boolean;\n\tlink: DefaultLinkModel;\n\tdiagramEngine: DiagramEngine;\n\tpointAdded?: (point: PointModel, event: MouseEvent) => any;\n}\n\nexport interface DefaultLinkState {\n\tselected: boolean;\n}\n\nexport class DefaultLinkWidget extends BaseWidget<DefaultLinkProps, DefaultLinkState> {\n\tpublic static defaultProps: DefaultLinkProps = {\n\t\tcolor: \"black\",\n\t\twidth: 3,\n\t\tlink: null,\n\t\tengine: null,\n\t\tsmooth: false,\n\t\tdiagramEngine: null\n\t};\n\n\t// DOM references to the label and paths (if label is given), used to calculate dynamic positioning\n\trefLabels: { [id: string]: HTMLElement };\n\trefPaths: SVGPathElement[];\n\n\tpathFinding: PathFinding; // only set when smart routing is active\n\n\tconstructor(props: DefaultLinkProps) {\n\t\tsuper(\"srd-default-link\", props);\n\n\t\tthis.refLabels = {};\n\t\tthis.refPaths = [];\n\t\tthis.state = {\n\t\t\tselected: false\n\t\t};\n\n\t\tif (props.diagramEngine.isSmartRoutingEnabled()) {\n\t\t\tthis.pathFinding = new PathFinding(this.props.diagramEngine);\n\t\t}\n\t}\n\n\tcalculateAllLabelPosition() {\n\t\t_.forEach(this.props.link.labels, (label, index) => {\n\t\t\tthis.calculateLabelPosition(label, index + 1);\n\t\t});\n\t}\n\n\tcomponentDidUpdate() {\n\t\tif (this.props.link.labels.length > 0) {\n\t\t\twindow.requestAnimationFrame(this.calculateAllLabelPosition.bind(this));\n\t\t}\n\t}\n\n\tcomponentDidMount() {\n\t\tif (this.props.link.labels.length > 0) {\n\t\t\twindow.requestAnimationFrame(this.calculateAllLabelPosition.bind(this));\n\t\t}\n\t}\n\n\taddPointToLink = (event: MouseEvent, index: number): void => {\n\t\tif (\n\t\t\t!event.shiftKey &&\n\t\t\t!this.props.diagramEngine.isModelLocked(this.props.link) &&\n\t\t\tthis.props.link.points.length - 1 <= this.props.diagramEngine.getMaxNumberPointsPerLink()\n\t\t) {\n\t\t\tconst point = new PointModel(this.props.link, this.props.diagramEngine.getRelativeMousePoint(event));\n\t\t\tpoint.setSelected(true);\n\t\t\tthis.forceUpdate();\n\t\t\tthis.props.link.addPoint(point, index);\n\t\t\tthis.props.pointAdded(point, event);\n\t\t}\n\t};\n\n\tgeneratePoint(pointIndex: number): JSX.Element {\n\t\tlet x = this.props.link.points[pointIndex].x;\n\t\tlet y = this.props.link.points[pointIndex].y;\n\n\t\treturn (\n\t\t\t<g key={\"point-\" + this.props.link.points[pointIndex].id}>\n\t\t\t\t<circle\n\t\t\t\t\tcx={x}\n\t\t\t\t\tcy={y}\n\t\t\t\t\tr={5}\n\t\t\t\t\tclassName={\n\t\t\t\t\t\t\"point \" +\n\t\t\t\t\t\tthis.bem(\"__point\") +\n\t\t\t\t\t\t(this.props.link.points[pointIndex].isSelected() ? this.bem(\"--point-selected\") : \"\")\n\t\t\t\t\t}\n\t\t\t\t/>\n\t\t\t\t<circle\n\t\t\t\t\tonMouseLeave={() => {\n\t\t\t\t\t\tthis.setState({ selected: false });\n\t\t\t\t\t}}\n\t\t\t\t\tonMouseEnter={() => {\n\t\t\t\t\t\tthis.setState({ selected: true });\n\t\t\t\t\t}}\n\t\t\t\t\tdata-id={this.props.link.points[pointIndex].id}\n\t\t\t\t\tdata-linkid={this.props.link.id}\n\t\t\t\t\tcx={x}\n\t\t\t\t\tcy={y}\n\t\t\t\t\tr={15}\n\t\t\t\t\topacity={0}\n\t\t\t\t\tclassName={\"point \" + this.bem(\"__point\")}\n\t\t\t\t/>\n\t\t\t</g>\n\t\t);\n\t}\n\n\tgenerateLabel(label: LabelModel) {\n\t\tconst canvas = this.props.diagramEngine.canvas as HTMLElement;\n\t\treturn (\n\t\t\t<foreignObject\n\t\t\t\tkey={label.id}\n\t\t\t\tclassName={this.bem(\"__label\")}\n\t\t\t\twidth={canvas.offsetWidth}\n\t\t\t\theight={canvas.offsetHeight}\n\t\t\t>\n\t\t\t\t<div ref={ref => (this.refLabels[label.id] = ref)}>\n\t\t\t\t\t{this.props.diagramEngine\n\t\t\t\t\t\t.getFactoryForLabel(label)\n\t\t\t\t\t\t.generateReactWidget(this.props.diagramEngine, label)}\n\t\t\t\t</div>\n\t\t\t</foreignObject>\n\t\t);\n\t}\n\n\tgenerateLink(path: string, extraProps: any, id: string | number): JSX.Element {\n\t\tvar props = this.props;\n\n\t\tvar Bottom = React.cloneElement(\n\t\t\t(props.diagramEngine.getFactoryForLink(this.props.link) as DefaultLinkFactory).generateLinkSegment(\n\t\t\t\tthis.props.link,\n\t\t\t\tthis,\n\t\t\t\tthis.state.selected || this.props.link.isSelected(),\n\t\t\t\tpath\n\t\t\t),\n\t\t\t{\n\t\t\t\tref: ref => ref && this.refPaths.push(ref)\n\t\t\t}\n\t\t);\n\n\t\tvar Top = React.cloneElement(Bottom, {\n\t\t\t...extraProps,\n\t\t\tstrokeLinecap: \"round\",\n\t\t\tonMouseLeave: () => {\n\t\t\t\tthis.setState({ selected: false });\n\t\t\t},\n\t\t\tonMouseEnter: () => {\n\t\t\t\tthis.setState({ selected: true });\n\t\t\t},\n\t\t\tref: null,\n\t\t\t\"data-linkid\": this.props.link.getID(),\n\t\t\tstrokeOpacity: this.state.selected ? 0.1 : 0,\n\t\t\tstrokeWidth: 20,\n\t\t\tonContextMenu: () => {\n\t\t\t\t// if (!this.props.diagramEngine.isModelLocked(this.props.link)) {\n\t\t\t\t// \tevent.preventDefault();\n\t\t\t\t// \tthis.props.link.remove();\n\t\t\t\t// }\n\t\t\t}\n\t\t});\n\n\t\treturn (\n\t\t\t<g key={\"link-\" + id}>\n\t\t\t\t{Bottom}\n\t\t\t\t{Top}\n\t\t\t</g>\n\t\t);\n\t}\n\n\tfindPathAndRelativePositionToRenderLabel = (index: number): { path: any; position: number } => {\n\t\t// an array to hold all path lengths, making sure we hit the DOM only once to fetch this information\n\t\tconst lengths = this.refPaths.map(path => path.getTotalLength());\n\n\t\t// calculate the point where we want to display the label\n\t\tlet labelPosition =\n\t\t\tlengths.reduce((previousValue, currentValue) => previousValue + currentValue, 0) *\n\t\t\t(index / (this.props.link.labels.length + 1));\n\n\t\t// find the path where the label will be rendered and calculate the relative position\n\t\tlet pathIndex = 0;\n\t\twhile (pathIndex < this.refPaths.length) {\n\t\t\tif (labelPosition - lengths[pathIndex] < 0) {\n\t\t\t\treturn {\n\t\t\t\t\tpath: this.refPaths[pathIndex],\n\t\t\t\t\tposition: labelPosition\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t// keep searching\n\t\t\tlabelPosition -= lengths[pathIndex];\n\t\t\tpathIndex++;\n\t\t}\n\t};\n\n\tcalculateLabelPosition = (label, index: number) => {\n\t\tif (!this.refLabels[label.id]) {\n\t\t\t// no label? nothing to do here\n\t\t\treturn;\n\t\t}\n\n\t\tconst { path, position } = this.findPathAndRelativePositionToRenderLabel(index);\n\n\t\tconst labelDimensions = {\n\t\t\twidth: this.refLabels[label.id].offsetWidth,\n\t\t\theight: this.refLabels[label.id].offsetHeight\n\t\t};\n\n\t\tconst pathCentre = path.getPointAtLength(position);\n\n\t\tconst labelCoordinates = {\n\t\t\tx: pathCentre.x - labelDimensions.width / 2 + label.offsetX,\n\t\t\ty: pathCentre.y - labelDimensions.height / 2 + label.offsetY\n\t\t};\n\t\tthis.refLabels[label.id].setAttribute(\n\t\t\t\"style\",\n\t\t\t`transform: translate(${labelCoordinates.x}px, ${labelCoordinates.y}px);`\n\t\t);\n\t};\n\n\t/**\n\t * Smart routing is only applicable when all conditions below are true:\n\t * - smart routing is set to true on the engine\n\t * - current link is between two nodes (not between a node and an empty point)\n\t * - no custom points exist along the line\n\t */\n\tisSmartRoutingApplicable(): boolean {\n\t\tconst { diagramEngine, link } = this.props;\n\n\t\tif (!diagramEngine.isSmartRoutingEnabled()) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (link.points.length !== 2) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (link.sourcePort === null || link.targetPort === null) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\trender() {\n\t\tconst { diagramEngine } = this.props;\n\t\tif (!diagramEngine.nodesRendered) {\n\t\t\treturn null;\n\t\t}\n\n\t\t//ensure id is present for all points on the path\n\t\tvar points = this.props.link.points;\n\t\tvar paths = [];\n\n\t\tif (this.isSmartRoutingApplicable()) {\n\t\t\t// first step: calculate a direct path between the points being linked\n\t\t\tconst directPathCoords = this.pathFinding.calculateDirectPath(_.first(points), _.last(points));\n\n\t\t\tconst routingMatrix = diagramEngine.getRoutingMatrix();\n\t\t\t// now we need to extract, from the routing matrix, the very first walkable points\n\t\t\t// so they can be used as origin and destination of the link to be created\n\t\t\tconst smartLink = this.pathFinding.calculateLinkStartEndCoords(routingMatrix, directPathCoords);\n\n\t\t\tif (smartLink) {\n\t\t\t\tconst { start, end, pathToStart, pathToEnd } = smartLink;\n\n\t\t\t\t// second step: calculate a path avoiding hitting other elements\n\t\t\t\tconst simplifiedPath = this.pathFinding.calculateDynamicPath(\n\t\t\t\t\troutingMatrix,\n\t\t\t\t\tstart,\n\t\t\t\t\tend,\n\t\t\t\t\tpathToStart,\n\t\t\t\t\tpathToEnd\n\t\t\t\t);\n\n\t\t\t\tpaths.push(\n\t\t\t\t\t//smooth: boolean, extraProps: any, id: string | number, firstPoint: PointModel, lastPoint: PointModel\n\t\t\t\t\tthis.generateLink(\n\t\t\t\t\t\tToolkit.generateDynamicPath(simplifiedPath),\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tonMouseDown: event => {\n\t\t\t\t\t\t\t\tthis.addPointToLink(event, 1);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"0\"\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\t// true when smart routing was skipped or not enabled.\n\t\t// See @link{#isSmartRoutingApplicable()}.\n\t\tif (paths.length === 0) {\n\t\t\tif (points.length === 2) {\n\t\t\t\tvar isHorizontal = Math.abs(points[0].x - points[1].x) > Math.abs(points[0].y - points[1].y);\n\t\t\t\tvar xOrY = isHorizontal ? \"x\" : \"y\";\n\n\t\t\t\t//draw the smoothing\n\t\t\t\t//if the points are too close, just draw a straight line\n\t\t\t\tvar margin = 50;\n\t\t\t\tif (Math.abs(points[0][xOrY] - points[1][xOrY]) < 50) {\n\t\t\t\t\tmargin = 5;\n\t\t\t\t}\n\n\t\t\t\tvar pointLeft = points[0];\n\t\t\t\tvar pointRight = points[1];\n\n\t\t\t\t//some defensive programming to make sure the smoothing is\n\t\t\t\t//always in the right direction\n\t\t\t\tif (pointLeft[xOrY] > pointRight[xOrY]) {\n\t\t\t\t\tpointLeft = points[1];\n\t\t\t\t\tpointRight = points[0];\n\t\t\t\t}\n\n\t\t\t\tpaths.push(\n\t\t\t\t\tthis.generateLink(\n\t\t\t\t\t\tToolkit.generateCurvePath(pointLeft, pointRight, this.props.link.curvyness),\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tonMouseDown: event => {\n\t\t\t\t\t\t\t\tthis.addPointToLink(event, 1);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"0\"\n\t\t\t\t\t)\n\t\t\t\t);\n\n\t\t\t\t// draw the link as dangeling\n\t\t\t\tif (this.props.link.targetPort === null) {\n\t\t\t\t\tpaths.push(this.generatePoint(1));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t//draw the multiple anchors and complex line instead\n\t\t\t\tfor (let j = 0; j < points.length - 1; j++) {\n\t\t\t\t\tpaths.push(\n\t\t\t\t\t\tthis.generateLink(\n\t\t\t\t\t\t\tToolkit.generateLinePath(points[j], points[j + 1]),\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"data-linkid\": this.props.link.id,\n\t\t\t\t\t\t\t\t\"data-point\": j,\n\t\t\t\t\t\t\t\tonMouseDown: (event: MouseEvent) => {\n\t\t\t\t\t\t\t\t\tthis.addPointToLink(event, j + 1);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tj\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\t//render the circles\n\t\t\t\tfor (var i = 1; i < points.length - 1; i++) {\n\t\t\t\t\tpaths.push(this.generatePoint(i));\n\t\t\t\t}\n\n\t\t\t\tif (this.props.link.targetPort === null) {\n\t\t\t\t\tpaths.push(this.generatePoint(points.length - 1));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.refPaths = [];\n\t\treturn (\n\t\t\t<g {...this.getProps()}>\n\t\t\t\t{paths}\n\t\t\t\t{_.map(this.props.link.labels, labelModel => {\n\t\t\t\t\treturn this.generateLabel(labelModel);\n\t\t\t\t})}\n\t\t\t</g>\n\t\t);\n\t}\n}\n","import * as React from \"react\";\nimport * as _ from \"lodash\";\nimport { DefaultNodeModel } from \"../models/DefaultNodeModel\";\nimport { DefaultPortLabel } from \"./DefaultPortLabelWidget\";\nimport { DiagramEngine } from \"../../DiagramEngine\";\nimport { BaseWidget, BaseWidgetProps } from \"../../widgets/BaseWidget\";\n\nexport interface DefaultNodeProps extends BaseWidgetProps {\n\tnode: DefaultNodeModel;\n\tdiagramEngine: DiagramEngine;\n}\n\nexport interface DefaultNodeState {}\n\n/**\n * @author Dylan Vorster\n */\nexport class DefaultNodeWidget extends BaseWidget<DefaultNodeProps, DefaultNodeState> {\n\tconstructor(props: DefaultNodeProps) {\n\t\tsuper(\"srd-default-node\", props);\n\t\tthis.state = {};\n\t}\n\n\tgeneratePort(port) {\n\t\treturn <DefaultPortLabel model={port} key={port.id} />;\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div {...this.getProps()} style={{ background: this.props.node.color }}>\n\t\t\t\t<div className={this.bem(\"__title\")}>\n\t\t\t\t\t<div className={this.bem(\"__name\")}>{this.props.node.name}</div>\n\t\t\t\t</div>\n\t\t\t\t<div className={this.bem(\"__ports\")}>\n\t\t\t\t\t<div className={this.bem(\"__in\")}>\n\t\t\t\t\t\t{_.map(this.props.node.getInPorts(), this.generatePort.bind(this))}\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className={this.bem(\"__out\")}>\n\t\t\t\t\t\t{_.map(this.props.node.getOutPorts(), this.generatePort.bind(this))}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import * as React from \"react\";\nimport { DefaultPortModel } from \"../models/DefaultPortModel\";\nimport { PortWidget } from \"../../widgets/PortWidget\";\nimport { BaseWidget, BaseWidgetProps } from \"../../widgets/BaseWidget\";\n\nexport interface DefaultPortLabelProps extends BaseWidgetProps {\n\tmodel: DefaultPortModel;\n}\n\nexport interface DefaultPortLabelState {}\n\n/**\n * @author Dylan Vorster\n */\nexport class DefaultPortLabel extends BaseWidget<DefaultPortLabelProps, DefaultPortLabelState> {\n\tconstructor(props) {\n\t\tsuper(\"srd-default-port\", props);\n\t}\n\n\tgetClassName() {\n\t\treturn super.getClassName() + (this.props.model.in ? this.bem(\"--in\") : this.bem(\"--out\"));\n\t}\n\n\trender() {\n\t\tvar port = <PortWidget node={this.props.model.getParent()} name={this.props.model.name} />;\n\t\tvar label = <div className=\"name\">{this.props.model.label}</div>;\n\n\t\treturn (\n\t\t\t<div {...this.getProps()}>\n\t\t\t\t{this.props.model.in ? port : label}\n\t\t\t\t{this.props.model.in ? label : port}\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import { BaseModel } from \"../models/BaseModel\";\n\nexport abstract class AbstractFactory<T extends BaseModel> {\n\ttype: string;\n\n\tconstructor(name: string) {\n\t\tthis.type = name;\n\t}\n\n\tgetType(): string {\n\t\treturn this.type;\n\t}\n\n\tabstract getNewInstance(initialConfig?: any): T;\n}\n","import { LabelModel } from \"../models/LabelModel\";\nimport { DiagramEngine } from \"../DiagramEngine\";\nimport { AbstractFactory } from \"./AbstractFactory\";\n\nexport abstract class AbstractLabelFactory<T extends LabelModel = LabelModel> extends AbstractFactory<T> {\n\tabstract generateReactWidget(diagramEngine: DiagramEngine, link: T): JSX.Element;\n}\n","import { LinkModel } from \"../models/LinkModel\";\nimport { DiagramEngine } from \"../DiagramEngine\";\nimport { AbstractFactory } from \"./AbstractFactory\";\n\nexport abstract class AbstractLinkFactory<T extends LinkModel = LinkModel> extends AbstractFactory<T> {\n\tabstract generateReactWidget(diagramEngine: DiagramEngine, link: T): JSX.Element;\n}\n","import { NodeModel } from \"../models/NodeModel\";\nimport { DiagramEngine } from \"../DiagramEngine\";\nimport { AbstractFactory } from \"./AbstractFactory\";\n\nexport abstract class AbstractNodeFactory<T extends NodeModel = NodeModel> extends AbstractFactory<T> {\n\tabstract generateReactWidget(diagramEngine: DiagramEngine, node: T): JSX.Element;\n}\n","import { PortModel } from \"../models/PortModel\";\nimport { DiagramEngine } from \"../DiagramEngine\";\nimport { AbstractFactory } from \"./AbstractFactory\";\n\nexport abstract class AbstractPortFactory<T extends PortModel = PortModel> extends AbstractFactory<T> {}\n","/**\n * @author Dylan Vorster\n */\n\nexport * from \"./Toolkit\";\nexport * from \"./BaseEntity\";\nexport * from \"./DiagramEngine\";\n\nexport * from \"./defaults/models/DefaultNodeModel\";\nexport * from \"./defaults/models/DefaultPortModel\";\nexport * from \"./defaults/models/DefaultLinkModel\";\nexport * from \"./defaults/models/DefaultLabelModel\";\n\nexport * from \"./defaults/factories/DefaultLinkFactory\";\nexport * from \"./defaults/factories/DefaultNodeFactory\";\nexport * from \"./defaults/factories/DefaultPortFactory\";\nexport * from \"./defaults/factories/DefaultLabelFactory\";\n\nexport * from \"./defaults/widgets/DefaultLinkWidget\";\nexport * from \"./defaults/widgets/DefaultLabelWidget\";\nexport * from \"./defaults/widgets/DefaultNodeWidget\";\nexport * from \"./defaults/widgets/DefaultPortLabelWidget\";\n\nexport * from \"./factories/AbstractFactory\";\nexport * from \"./factories/AbstractLabelFactory\";\nexport * from \"./factories/AbstractLinkFactory\";\nexport * from \"./factories/AbstractNodeFactory\";\nexport * from \"./factories/AbstractPortFactory\";\n\nexport * from \"./routing/PathFinding\";\n\nexport * from \"./actions/BaseAction\";\nexport * from \"./actions/MoveCanvasAction\";\nexport * from \"./actions/MoveItemsAction\";\nexport * from \"./actions/SelectingAction\";\n\nexport * from \"./models/SelectionModel\";\nexport * from \"./models/BaseModel\";\nexport * from \"./models/DiagramModel\";\nexport * from \"./models/LinkModel\";\nexport * from \"./models/NodeModel\";\nexport * from \"./models/PointModel\";\nexport * from \"./models/PortModel\";\nexport * from \"./models/LabelModel\";\n\nexport * from \"./widgets/DiagramWidget\";\nexport * from \"./widgets/LinkWidget\";\nexport * from \"./widgets/NodeWidget\";\nexport * from \"./widgets/PortWidget\";\nexport * from \"./widgets/BaseWidget\";\n\nexport * from \"./widgets/layers/LinkLayerWidget\";\nexport * from \"./widgets/layers/NodeLayerWidget\";\n","import { BaseEntity, BaseListener } from \"../BaseEntity\";\nimport * as _ from \"lodash\";\nimport { BaseEvent } from \"../BaseEntity\";\nimport { DiagramEngine } from \"../DiagramEngine\";\n\nexport interface BaseModelListener extends BaseListener {\n\tselectionChanged?(event: BaseEvent<BaseModel> & { isSelected: boolean }): void;\n\n\tentityRemoved?(event: BaseEvent<BaseModel>): void;\n}\n\n/**\n * @author Dylan Vorster\n */\nexport class BaseModel<\n\tX extends BaseEntity = BaseEntity,\n\tT extends BaseModelListener = BaseModelListener\n> extends BaseEntity<T> {\n\ttype: string;\n\tselected: boolean;\n\tparent: X;\n\n\tconstructor(type?: string, id?: string) {\n\t\tsuper(id);\n\t\tthis.type = type;\n\t\tthis.selected = false;\n\t}\n\n\tpublic getParent(): X {\n\t\treturn this.parent;\n\t}\n\n\tpublic setParent(parent: X) {\n\t\tthis.parent = parent;\n\t}\n\n\tpublic getSelectedEntities(): BaseModel<any, T>[] {\n\t\tif (this.isSelected()) {\n\t\t\treturn [this];\n\t\t}\n\t\treturn [];\n\t}\n\n\tpublic deSerialize(ob, engine: DiagramEngine) {\n\t\tsuper.deSerialize(ob, engine);\n\t\tthis.type = ob.type;\n\t\tthis.selected = ob.selected;\n\t}\n\n\tpublic serialize() {\n\t\treturn _.merge(super.serialize(), {\n\t\t\ttype: this.type,\n\t\t\tselected: this.selected\n\t\t});\n\t}\n\n\tpublic getType(): string {\n\t\treturn this.type;\n\t}\n\n\tpublic getID(): string {\n\t\treturn this.id;\n\t}\n\n\tpublic isSelected(): boolean {\n\t\treturn this.selected;\n\t}\n\n\tpublic setSelected(selected: boolean = true) {\n\t\tthis.selected = selected;\n\t\tthis.iterateListeners((listener, event) => {\n\t\t\tif (listener.selectionChanged) {\n\t\t\t\tlistener.selectionChanged({ ...event, isSelected: selected });\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic remove() {\n\t\tthis.iterateListeners((listener, event) => {\n\t\t\tif (listener.entityRemoved) {\n\t\t\t\tlistener.entityRemoved(event);\n\t\t\t}\n\t\t});\n\t}\n}\n","import { BaseListener, BaseEntity, BaseEvent, BaseEntityType } from \"../BaseEntity\";\nimport * as _ from \"lodash\";\nimport { DiagramEngine } from \"../DiagramEngine\";\nimport { LinkModel } from \"./LinkModel\";\nimport { NodeModel } from \"./NodeModel\";\nimport { PortModel } from \"./PortModel\";\nimport { BaseModel, BaseModelListener } from \"./BaseModel\";\nimport { PointModel } from \"./PointModel\";\n/**\n * @author Dylan Vorster\n *\n */\nexport interface DiagramListener extends BaseListener {\n\tnodesUpdated?(event: BaseEvent & { node: NodeModel; isCreated: boolean }): void;\n\n\tlinksUpdated?(event: BaseEvent & { link: LinkModel; isCreated: boolean }): void;\n\n\toffsetUpdated?(event: BaseEvent<DiagramModel> & { offsetX: number; offsetY: number }): void;\n\n\tzoomUpdated?(event: BaseEvent<DiagramModel> & { zoom: number }): void;\n\n\tgridUpdated?(event: BaseEvent<DiagramModel> & { size: number }): void;\n}\n\n/**\n *\n */\nexport class DiagramModel extends BaseEntity<DiagramListener> {\n\t//models\n\tlinks: { [s: string]: LinkModel };\n\tnodes: { [s: string]: NodeModel };\n\n\t//control variables\n\toffsetX: number;\n\toffsetY: number;\n\tzoom: number;\n\trendered: boolean;\n\tgridSize: number;\n\tisCanvasMoving: boolean;\n\n\tconstructor() {\n\t\tsuper();\n\n\t\tthis.links = {};\n\t\tthis.nodes = {};\n\n\t\tthis.offsetX = 0;\n\t\tthis.offsetY = 0;\n\t\tthis.zoom = 100;\n\t\tthis.rendered = false;\n\t\tthis.gridSize = 0;\n\t\tthis.isCanvasMoving = false;\n\t}\n\n\tsetGridSize(size: number = 0) {\n\t\tthis.gridSize = size;\n\t\tthis.iterateListeners((listener, event) => {\n\t\t\tif (listener.gridUpdated) {\n\t\t\t\tlistener.gridUpdated({ ...event, size: size });\n\t\t\t}\n\t\t});\n\t}\n\n\tgetGridPosition(pos) {\n\t\tif (this.gridSize === 0) {\n\t\t\treturn pos;\n\t\t}\n\t\treturn this.gridSize * Math.floor((pos + this.gridSize / 2) / this.gridSize);\n\t}\n\n\tdeSerializeDiagram(object: any, diagramEngine: DiagramEngine) {\n\t\tthis.deSerialize(object, diagramEngine);\n\n\t\tthis.offsetX = object.offsetX;\n\t\tthis.offsetY = object.offsetY;\n\t\tthis.zoom = object.zoom;\n\t\tthis.gridSize = object.gridSize;\n\t\tthis.isCanvasMoving = object.isCanvasMoving;\n\n\t\t// deserialize nodes\n\t\t_.forEach(object.nodes, (node: any) => {\n\t\t\tlet nodeOb = diagramEngine.getNodeFactory(node.type).getNewInstance(node);\n\t\t\tnodeOb.setParent(this);\n\t\t\tnodeOb.deSerialize(node, diagramEngine);\n\t\t\tthis.addNode(nodeOb);\n\t\t});\n\n\t\t// deserialze links\n\t\t_.forEach(object.links, (link: any) => {\n\t\t\tlet linkOb = diagramEngine.getLinkFactory(link.type).getNewInstance();\n\t\t\tlinkOb.setParent(this);\n\t\t\tlinkOb.deSerialize(link, diagramEngine);\n\t\t\tthis.addLink(linkOb);\n\t\t});\n\t}\n\n\tserializeDiagram() {\n\t\treturn _.merge(this.serialize(), {\n\t\t\toffsetX: this.offsetX,\n\t\t\toffsetY: this.offsetY,\n\t\t\tzoom: this.zoom,\n\t\t\tgridSize: this.gridSize,\n\t\t\tlinks: _.map(this.links, link => {\n\t\t\t\treturn link.serialize();\n\t\t\t}),\n\t\t\tnodes: _.map(this.nodes, node => {\n\t\t\t\treturn node.serialize();\n\t\t\t}),\n\t\t\tisCanvasMoving: this.isCanvasMoving\n\t\t});\n\t}\n\n\tclearSelection(ignore: BaseModel<BaseEntity, BaseModelListener> | null = null) {\n\t\t_.forEach(this.getSelectedItems(), element => {\n\t\t\tif (ignore && ignore.getID() === element.getID()) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\telement.setSelected(false); //TODO dont fire the listener\n\t\t});\n\t}\n\n\tgetSelectedItems(...filters: BaseEntityType[]): BaseModel<BaseEntity, BaseModelListener>[] {\n\t\tif (!Array.isArray(filters)) {\n\t\t\tfilters = [filters];\n\t\t}\n\t\tvar items = [];\n\n\t\t// run through nodes\n\t\titems = items.concat(\n\t\t\t_.flatMap(this.nodes, node => {\n\t\t\t\treturn node.getSelectedEntities();\n\t\t\t})\n\t\t);\n\n\t\t// find all the links\n\t\titems = items.concat(\n\t\t\t_.flatMap(this.links, link => {\n\t\t\t\treturn link.getSelectedEntities();\n\t\t\t})\n\t\t);\n\n\t\t//find all points\n\t\titems = items.concat(\n\t\t\t_.flatMap(this.links, link => {\n\t\t\t\treturn _.flatMap(link.points, point => {\n\t\t\t\t\treturn point.getSelectedEntities();\n\t\t\t\t});\n\t\t\t})\n\t\t);\n\n\t\titems = _.uniq(items);\n\n\t\tif (filters.length > 0) {\n\t\t\titems = _.filter(_.uniq(items), (item: BaseModel<any>) => {\n\t\t\t\tif (_.includes(filters, \"node\") && item instanceof NodeModel) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\tif (_.includes(filters, \"link\") && item instanceof LinkModel) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\tif (_.includes(filters, \"port\") && item instanceof PortModel) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\tif (_.includes(filters, \"point\") && item instanceof PointModel) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t});\n\t\t}\n\n\t\treturn items;\n\t}\n\n\tsetZoomLevel(zoom: number) {\n\t\tif (zoom > 300) {\n\t\t\tthis.zoom = 300;\n\t\t} else if (zoom < 15) {\n\t\t\tthis.zoom = 15;\n\t\t} else {\n\t\t\tthis.zoom = zoom;\n\t\t}\n\n\t\tthis.iterateListeners((listener, event) => {\n\t\t\tif (listener.zoomUpdated) {\n\t\t\t\tlistener.zoomUpdated({ ...event, zoom: zoom });\n\t\t\t}\n\t\t});\n\t}\n\n\tsetIsCanvasMoving(value: boolean) {\n\t\tthis.isCanvasMoving = value;\n\t}\n\n\tsetOffset(offsetX: number, offsetY: number) {\n\t\tthis.offsetX = offsetX;\n\t\tthis.offsetY = offsetY;\n\t\tthis.iterateListeners((listener, event) => {\n\t\t\tif (listener.offsetUpdated) {\n\t\t\t\tlistener.offsetUpdated({ ...event, offsetX: offsetX, offsetY: offsetY });\n\t\t\t}\n\t\t});\n\t}\n\n\tsetOffsetX(offsetX: number) {\n\t\tthis.offsetX = offsetX;\n\t\tthis.iterateListeners((listener, event) => {\n\t\t\tif (listener.offsetUpdated) {\n\t\t\t\tlistener.offsetUpdated({ ...event, offsetX: offsetX, offsetY: this.offsetY });\n\t\t\t}\n\t\t});\n\t}\n\tsetOffsetY(offsetY: number) {\n\t\tthis.offsetY = offsetY;\n\n\t\tthis.iterateListeners((listener, event) => {\n\t\t\tif (listener.offsetUpdated) {\n\t\t\t\tlistener.offsetUpdated({ ...event, offsetX: this.offsetX, offsetY: this.offsetY });\n\t\t\t}\n\t\t});\n\t}\n\n\tgetOffsetY() {\n\t\treturn this.offsetY;\n\t}\n\n\tgetOffsetX() {\n\t\treturn this.offsetX;\n\t}\n\n\tgetIsCanvasMoving() {\n\t\treturn this.isCanvasMoving;\n\t}\n\n\tgetZoomLevel() {\n\t\treturn this.zoom;\n\t}\n\n\tgetNode(node: string | NodeModel): NodeModel | null {\n\t\tif (node instanceof NodeModel) {\n\t\t\treturn node;\n\t\t}\n\t\tif (!this.nodes[node]) {\n\t\t\treturn null;\n\t\t}\n\t\treturn this.nodes[node];\n\t}\n\n\tgetLink(link: string | LinkModel): LinkModel | null {\n\t\tif (link instanceof LinkModel) {\n\t\t\treturn link;\n\t\t}\n\t\tif (!this.links[link]) {\n\t\t\treturn null;\n\t\t}\n\t\treturn this.links[link];\n\t}\n\n\taddAll(...models: BaseModel[]): BaseModel[] {\n\t\t_.forEach(models, model => {\n\t\t\tif (model instanceof LinkModel) {\n\t\t\t\tthis.addLink(model);\n\t\t\t} else if (model instanceof NodeModel) {\n\t\t\t\tthis.addNode(model);\n\t\t\t}\n\t\t});\n\t\treturn models;\n\t}\n\n\taddLink(link: LinkModel): LinkModel {\n\t\tlink.addListener({\n\t\t\tentityRemoved: () => {\n\t\t\t\tthis.removeLink(link);\n\t\t\t}\n\t\t});\n\t\tthis.links[link.getID()] = link;\n\t\tthis.iterateListeners((listener, event) => {\n\t\t\tif (listener.linksUpdated) {\n\t\t\t\tlistener.linksUpdated({ ...event, link: link, isCreated: true });\n\t\t\t}\n\t\t});\n\t\treturn link;\n\t}\n\n\taddNode(node: NodeModel): NodeModel {\n\t\tnode.addListener({\n\t\t\tentityRemoved: () => {\n\t\t\t\tthis.removeNode(node);\n\t\t\t}\n\t\t});\n\t\tthis.nodes[node.getID()] = node;\n\t\tthis.iterateListeners((listener, event) => {\n\t\t\tif (listener.nodesUpdated) {\n\t\t\t\tlistener.nodesUpdated({ ...event, node: node, isCreated: true });\n\t\t\t}\n\t\t});\n\t\treturn node;\n\t}\n\n\tremoveLink(link: LinkModel | string) {\n\t\tlink = this.getLink(link);\n\t\tdelete this.links[link.getID()];\n\t\tthis.iterateListeners((listener, event) => {\n\t\t\tif (listener.linksUpdated) {\n\t\t\t\tlistener.linksUpdated({ ...event, link: link as LinkModel, isCreated: false });\n\t\t\t}\n\t\t});\n\t}\n\n\tremoveNode(node: NodeModel | string) {\n\t\tnode = this.getNode(node);\n\t\tdelete this.nodes[node.getID()];\n\t\tthis.iterateListeners((listener, event) => {\n\t\t\tif (listener.nodesUpdated) {\n\t\t\t\tlistener.nodesUpdated({ ...event, node: node as NodeModel, isCreated: false });\n\t\t\t}\n\t\t});\n\t}\n\n\tgetLinks(): { [s: string]: LinkModel } {\n\t\treturn this.links;\n\t}\n\n\tgetNodes(): { [s: string]: NodeModel } {\n\t\treturn this.nodes;\n\t}\n}\n","import { BaseModel } from \"./BaseModel\";\nimport { LinkModel } from \"./LinkModel\";\n\nexport class LabelModel extends BaseModel<LinkModel> {\n\toffsetX: number;\n\toffsetY: number;\n\n\tconstructor(type?: string, id?: string) {\n\t\tsuper(type, id);\n\t\tthis.offsetX = 0;\n\t\tthis.offsetY = 0;\n\t}\n}\n","import { BaseModel, BaseModelListener } from \"./BaseModel\";\nimport { PortModel } from \"./PortModel\";\nimport { PointModel } from \"./PointModel\";\nimport * as _ from \"lodash\";\nimport { BaseEvent } from \"../BaseEntity\";\nimport { LabelModel } from \"./LabelModel\";\nimport { DiagramEngine } from \"../DiagramEngine\";\nimport { DiagramModel } from \"./DiagramModel\";\n\nexport interface LinkModelListener extends BaseModelListener {\n\tsourcePortChanged?(event: BaseEvent<LinkModel> & { port: null | PortModel }): void;\n\n\ttargetPortChanged?(event: BaseEvent<LinkModel> & { port: null | PortModel }): void;\n}\n\nexport class LinkModel<T extends LinkModelListener = LinkModelListener> extends BaseModel<DiagramModel, T> {\n\tsourcePort: PortModel | null;\n\ttargetPort: PortModel | null;\n\tlabels: LabelModel[];\n\tpoints: PointModel[];\n\textras: {};\n\n\tconstructor(linkType: string = \"default\", id?: string) {\n\t\tsuper(linkType, id);\n\t\tthis.points = [new PointModel(this, { x: 0, y: 0 }), new PointModel(this, { x: 0, y: 0 })];\n\t\tthis.extras = {};\n\t\tthis.sourcePort = null;\n\t\tthis.targetPort = null;\n\t\tthis.labels = [];\n\t}\n\n\tdeSerialize(ob, engine: DiagramEngine) {\n\t\tsuper.deSerialize(ob, engine);\n\t\tthis.extras = ob.extras;\n\t\tthis.points = _.map(ob.points || [], (point: { x; y }) => {\n\t\t\tvar p = new PointModel(this, { x: point.x, y: point.y });\n\t\t\tp.deSerialize(point, engine);\n\t\t\treturn p;\n\t\t});\n\n\t\t//deserialize labels\n\t\t_.forEach(ob.labels || [], (label: any) => {\n\t\t\tlet labelOb = engine.getLabelFactory(label.type).getNewInstance();\n\t\t\tlabelOb.deSerialize(label, engine);\n\t\t\tthis.addLabel(labelOb);\n\t\t});\n\n\t\tif (ob.target) {\n\t\t\tthis.setTargetPort(\n\t\t\t\tthis.getParent()\n\t\t\t\t\t.getNode(ob.target)\n\t\t\t\t\t.getPortFromID(ob.targetPort)\n\t\t\t);\n\t\t}\n\n\t\tif (ob.source) {\n\t\t\tthis.setSourcePort(\n\t\t\t\tthis.getParent()\n\t\t\t\t\t.getNode(ob.source)\n\t\t\t\t\t.getPortFromID(ob.sourcePort)\n\t\t\t);\n\t\t}\n\t}\n\n\tserialize() {\n\t\treturn _.merge(super.serialize(), {\n\t\t\tsource: this.sourcePort ? this.sourcePort.getParent().id : null,\n\t\t\tsourcePort: this.sourcePort ? this.sourcePort.id : null,\n\t\t\ttarget: this.targetPort ? this.targetPort.getParent().id : null,\n\t\t\ttargetPort: this.targetPort ? this.targetPort.id : null,\n\t\t\tpoints: _.map(this.points, point => {\n\t\t\t\treturn point.serialize();\n\t\t\t}),\n\t\t\textras: this.extras,\n\t\t\tlabels: _.map(this.labels, label => {\n\t\t\t\treturn label.serialize();\n\t\t\t})\n\t\t});\n\t}\n\n\tdoClone(lookupTable = {}, clone) {\n\t\tclone.setPoints(\n\t\t\t_.map(this.getPoints(), (point: PointModel) => {\n\t\t\t\treturn point.clone(lookupTable);\n\t\t\t})\n\t\t);\n\t\tif (this.sourcePort) {\n\t\t\tclone.setSourcePort(this.sourcePort.clone(lookupTable));\n\t\t}\n\t\tif (this.targetPort) {\n\t\t\tclone.setTargetPort(this.targetPort.clone(lookupTable));\n\t\t}\n\t}\n\n\tremove() {\n\t\tif (this.sourcePort) {\n\t\t\tthis.sourcePort.removeLink(this);\n\t\t}\n\t\tif (this.targetPort) {\n\t\t\tthis.targetPort.removeLink(this);\n\t\t}\n\t\tsuper.remove();\n\t}\n\n\tisLastPoint(point: PointModel) {\n\t\tvar index = this.getPointIndex(point);\n\t\treturn index === this.points.length - 1;\n\t}\n\n\tgetPointIndex(point: PointModel) {\n\t\treturn this.points.indexOf(point);\n\t}\n\n\tgetPointModel(id: string): PointModel | null {\n\t\tfor (var i = 0; i < this.points.length; i++) {\n\t\t\tif (this.points[i].id === id) {\n\t\t\t\treturn this.points[i];\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tgetPortForPoint(point: PointModel): PortModel {\n\t\tif (this.sourcePort !== null && this.getFirstPoint().getID() === point.getID()) {\n\t\t\treturn this.sourcePort;\n\t\t}\n\t\tif (this.targetPort !== null && this.getLastPoint().getID() === point.getID()) {\n\t\t\treturn this.targetPort;\n\t\t}\n\t\treturn null;\n\t}\n\n\tgetPointForPort(port: PortModel): PointModel {\n\t\tif (this.sourcePort !== null && this.sourcePort.getID() === port.getID()) {\n\t\t\treturn this.getFirstPoint();\n\t\t}\n\t\tif (this.targetPort !== null && this.targetPort.getID() === port.getID()) {\n\t\t\treturn this.getLastPoint();\n\t\t}\n\t\treturn null;\n\t}\n\n\tgetFirstPoint(): PointModel {\n\t\treturn this.points[0];\n\t}\n\n\tgetLastPoint(): PointModel {\n\t\treturn this.points[this.points.length - 1];\n\t}\n\n\tsetSourcePort(port: PortModel) {\n\t\tif (port !== null) {\n\t\t\tport.addLink(this);\n\t\t}\n\t\tif (this.sourcePort !== null) {\n\t\t\tthis.sourcePort.removeLink(this);\n\t\t}\n\t\tthis.sourcePort = port;\n\t\tthis.iterateListeners((listener: LinkModelListener, event) => {\n\t\t\tif (listener.sourcePortChanged) {\n\t\t\t\tlistener.sourcePortChanged({ ...event, port: port });\n\t\t\t}\n\t\t});\n\t}\n\n\tgetSourcePort(): PortModel {\n\t\treturn this.sourcePort;\n\t}\n\n\tgetTargetPort(): PortModel {\n\t\treturn this.targetPort;\n\t}\n\n\tsetTargetPort(port: PortModel) {\n\t\tif (port !== null) {\n\t\t\tport.addLink(this);\n\t\t}\n\t\tif (this.targetPort !== null) {\n\t\t\tthis.targetPort.removeLink(this);\n\t\t}\n\t\tthis.targetPort = port;\n\t\tthis.iterateListeners((listener: LinkModelListener, event) => {\n\t\t\tif (listener.targetPortChanged) {\n\t\t\t\tlistener.targetPortChanged({ ...event, port: port });\n\t\t\t}\n\t\t});\n\t}\n\n\tpoint(x: number, y: number): PointModel {\n\t\treturn this.addPoint(this.generatePoint(x, y));\n\t}\n\n\taddLabel(label: LabelModel) {\n\t\tlabel.setParent(this);\n\t\tthis.labels.push(label);\n\t}\n\n\tgetPoints(): PointModel[] {\n\t\treturn this.points;\n\t}\n\n\tsetPoints(points: PointModel[]) {\n\t\t_.forEach(points, point => {\n\t\t\tpoint.setParent(this);\n\t\t});\n\t\tthis.points = points;\n\t}\n\n\tremovePoint(pointModel: PointModel) {\n\t\tthis.points.splice(this.getPointIndex(pointModel), 1);\n\t}\n\n\tremovePointsBefore(pointModel: PointModel) {\n\t\tthis.points.splice(0, this.getPointIndex(pointModel));\n\t}\n\n\tremovePointsAfter(pointModel: PointModel) {\n\t\tthis.points.splice(this.getPointIndex(pointModel) + 1);\n\t}\n\n\tremoveMiddlePoints() {\n\t\tif (this.points.length > 2) {\n\t\t\tthis.points.splice(0, this.points.length - 2);\n\t\t}\n\t}\n\n\taddPoint<P extends PointModel>(pointModel: P, index = 1): P {\n\t\tpointModel.setParent(this);\n\t\tthis.points.splice(index, 0, pointModel);\n\t\treturn pointModel;\n\t}\n\n\tgeneratePoint(x: number = 0, y: number = 0): PointModel {\n\t\treturn new PointModel(this, { x: x, y: y });\n\t}\n}\n","import { BaseModel, BaseModelListener } from \"./BaseModel\";\nimport { PortModel } from \"./PortModel\";\nimport * as _ from \"lodash\";\nimport { DiagramEngine } from \"../DiagramEngine\";\nimport { DiagramModel } from \"./DiagramModel\";\n\nexport class NodeModel extends BaseModel<DiagramModel, BaseModelListener> {\n\tx: number;\n\ty: number;\n\textras: any;\n\tports: { [s: string]: PortModel };\n\n\t// calculated post rendering so routing can be done correctly\n\twidth: number;\n\theight: number;\n\n\tconstructor(nodeType: string = \"default\", id?: string) {\n\t\tsuper(nodeType, id);\n\t\tthis.x = 0;\n\t\tthis.y = 0;\n\t\tthis.extras = {};\n\t\tthis.ports = {};\n\t}\n\n\tsetPosition(x, y) {\n\t\t//store position\n\t\tlet oldX = this.x;\n\t\tlet oldY = this.y;\n\t\t_.forEach(this.ports, port => {\n\t\t\t_.forEach(port.getLinks(), link => {\n\t\t\t\tlet point = link.getPointForPort(port);\n\t\t\t\tpoint.x = point.x + x - oldX;\n\t\t\t\tpoint.y = point.y + y - oldY;\n\t\t\t});\n\t\t});\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t}\n\n\tgetSelectedEntities() {\n\t\tlet entities = super.getSelectedEntities();\n\n\t\t// add the points of each link that are selected here\n\t\tif (this.isSelected()) {\n\t\t\t_.forEach(this.ports, port => {\n\t\t\t\tentities = entities.concat(\n\t\t\t\t\t_.map(port.getLinks(), link => {\n\t\t\t\t\t\treturn link.getPointForPort(port);\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t});\n\t\t}\n\t\treturn entities;\n\t}\n\n\tdeSerialize(ob, engine: DiagramEngine) {\n\t\tsuper.deSerialize(ob, engine);\n\t\tthis.x = ob.x;\n\t\tthis.y = ob.y;\n\t\tthis.extras = ob.extras;\n\n\t\t//deserialize ports\n\t\t_.forEach(ob.ports, (port: any) => {\n\t\t\tlet portOb = engine.getPortFactory(port.type).getNewInstance();\n\t\t\tportOb.deSerialize(port, engine);\n\t\t\tthis.addPort(portOb);\n\t\t});\n\t}\n\n\tserialize() {\n\t\treturn _.merge(super.serialize(), {\n\t\t\tx: this.x,\n\t\t\ty: this.y,\n\t\t\textras: this.extras,\n\t\t\tports: _.map(this.ports, port => {\n\t\t\t\treturn port.serialize();\n\t\t\t})\n\t\t});\n\t}\n\n\tdoClone(lookupTable = {}, clone) {\n\t\t// also clone the ports\n\t\tclone.ports = {};\n\t\t_.forEach(this.ports, port => {\n\t\t\tclone.addPort(port.clone(lookupTable));\n\t\t});\n\t}\n\n\tremove() {\n\t\tsuper.remove();\n\t\t_.forEach(this.ports, port => {\n\t\t\t_.forEach(port.getLinks(), link => {\n\t\t\t\tlink.remove();\n\t\t\t});\n\t\t});\n\t}\n\n\tgetPortFromID(id): PortModel | null {\n\t\tfor (var i in this.ports) {\n\t\t\tif (this.ports[i].id === id) {\n\t\t\t\treturn this.ports[i];\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tgetPort(name: string): PortModel | null {\n\t\treturn this.ports[name];\n\t}\n\n\tgetPorts(): { [s: string]: PortModel } {\n\t\treturn this.ports;\n\t}\n\n\tremovePort(port: PortModel) {\n\t\t//clear the parent node reference\n\t\tif (this.ports[port.name]) {\n\t\t\tthis.ports[port.name].setParent(null);\n\t\t\tdelete this.ports[port.name];\n\t\t}\n\t}\n\n\taddPort<T extends PortModel>(port: T): T {\n\t\tport.setParent(this);\n\t\tthis.ports[port.name] = port;\n\t\treturn port;\n\t}\n\n\tupdateDimensions({ width, height }: { width: number; height: number }) {\n\t\tthis.width = width;\n\t\tthis.height = height;\n\t}\n}\n","import { BaseModel, BaseModelListener } from \"./BaseModel\";\nimport { LinkModel } from \"./LinkModel\";\nimport * as _ from \"lodash\";\nimport { DiagramEngine } from \"../DiagramEngine\";\n\nexport class PointModel extends BaseModel<LinkModel, BaseModelListener> {\n\tx: number;\n\ty: number;\n\n\tconstructor(link: LinkModel, points: { x: number; y: number }) {\n\t\tsuper();\n\t\tthis.x = points.x;\n\t\tthis.y = points.y;\n\t\tthis.parent = link;\n\t}\n\n\tgetSelectedEntities() {\n\t\tif (super.isSelected() && !this.isConnectedToPort()) {\n\t\t\treturn [this];\n\t\t}\n\t\treturn [];\n\t}\n\n\tisConnectedToPort(): boolean {\n\t\treturn this.parent.getPortForPoint(this) !== null;\n\t}\n\n\tgetLink(): LinkModel {\n\t\treturn this.getParent();\n\t}\n\n\tdeSerialize(ob, engine: DiagramEngine) {\n\t\tsuper.deSerialize(ob, engine);\n\t\tthis.x = ob.x;\n\t\tthis.y = ob.y;\n\t}\n\n\tserialize() {\n\t\treturn _.merge(super.serialize(), {\n\t\t\tx: this.x,\n\t\t\ty: this.y\n\t\t});\n\t}\n\n\tremove() {\n\t\t//clear references\n\t\tif (this.parent) {\n\t\t\tthis.parent.removePoint(this);\n\t\t}\n\t\tsuper.remove();\n\t}\n\n\tupdateLocation(points: { x: number; y: number }) {\n\t\tthis.x = points.x;\n\t\tthis.y = points.y;\n\t}\n\n\tgetX(): number {\n\t\treturn this.x;\n\t}\n\n\tgetY(): number {\n\t\treturn this.y;\n\t}\n\n\tisLocked() {\n\t\treturn super.isLocked() || this.getParent().isLocked();\n\t}\n}\n","import { BaseModel, BaseModelListener } from \"./BaseModel\";\nimport { NodeModel } from \"./NodeModel\";\nimport { LinkModel } from \"./LinkModel\";\nimport * as _ from \"lodash\";\nimport { DiagramEngine } from \"../DiagramEngine\";\n\nexport class PortModel extends BaseModel<NodeModel, BaseModelListener> {\n\tname: string;\n\tlinks: { [id: string]: LinkModel };\n\tmaximumLinks: number;\n\n\t// calculated post rendering so routing can be done correctly\n\tx: number;\n\ty: number;\n\twidth: number;\n\theight: number;\n\n\tconstructor(name: string, type?: string, id?: string, maximumLinks?: number) {\n\t\tsuper(type, id);\n\t\tthis.name = name;\n\t\tthis.links = {};\n\t\tthis.maximumLinks = maximumLinks;\n\t}\n\n\tdeSerialize(ob, engine: DiagramEngine) {\n\t\tsuper.deSerialize(ob, engine);\n\t\tthis.name = ob.name;\n\t\tthis.maximumLinks = ob.maximumLinks;\n\t}\n\n\tserialize() {\n\t\treturn _.merge(super.serialize(), {\n\t\t\tname: this.name,\n\t\t\tparentNode: this.parent.id,\n\t\t\tlinks: _.map(this.links, link => {\n\t\t\t\treturn link.id;\n\t\t\t}),\n\t\t\tmaximumLinks: this.maximumLinks\n\t\t});\n\t}\n\n\tdoClone(lookupTable = {}, clone) {\n\t\tclone.links = {};\n\t\tclone.parentNode = this.getParent().clone(lookupTable);\n\t}\n\n\tgetNode(): NodeModel {\n\t\treturn this.getParent();\n\t}\n\n\tgetName(): string {\n\t\treturn this.name;\n\t}\n\n\tgetMaximumLinks(): number {\n\t\treturn this.maximumLinks;\n\t}\n\n\tsetMaximumLinks(maximumLinks: number) {\n\t\tthis.maximumLinks = maximumLinks;\n\t}\n\n\tremoveLink(link: LinkModel) {\n\t\tdelete this.links[link.getID()];\n\t}\n\n\taddLink(link: LinkModel) {\n\t\tthis.links[link.getID()] = link;\n\t}\n\n\tgetLinks(): { [id: string]: LinkModel } {\n\t\treturn this.links;\n\t}\n\n\tpublic createLinkModel(): LinkModel | null {\n\t\tif (_.isFinite(this.maximumLinks)) {\n\t\t\tvar numberOfLinks: number = _.size(this.links);\n\t\t\tif (this.maximumLinks === 1 && numberOfLinks >= 1) {\n\t\t\t\treturn _.values(this.links)[0];\n\t\t\t} else if (numberOfLinks >= this.maximumLinks) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tupdateCoords({ x, y, width, height }: { x: number; y: number; width: number; height: number }) {\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.width = width;\n\t\tthis.height = height;\n\t}\n\n\tcanLinkToPort(port: PortModel): boolean {\n\t\treturn true;\n\t}\n\n\tisLocked() {\n\t\treturn super.isLocked() || this.getParent().isLocked();\n\t}\n}\n","import * as PF from \"pathfinding\";\nimport { DiagramEngine } from \"../main\";\n\n/*\nit can be very expensive to calculate routes when every single pixel on the canvas\nis individually represented. Using the factor below, we combine values in order\nto achieve the best trade-off between accuracy and performance.\n*/\nexport const ROUTING_SCALING_FACTOR = 5;\n\nconst pathFinderInstance = new PF.JumpPointFinder({\n\theuristic: PF.Heuristic.manhattan,\n\tdiagonalMovement: PF.DiagonalMovement.Never\n});\n\nexport default class PathFinding {\n\tinstance: any;\n\tdiagramEngine: DiagramEngine;\n\n\tconstructor(diagramEngine: DiagramEngine) {\n\t\tthis.instance = pathFinderInstance;\n\t\tthis.diagramEngine = diagramEngine;\n\t}\n\n\t/**\n\t * Taking as argument a fully unblocked walking matrix, this method\n\t * finds a direct path from point A to B.\n\t */\n\tcalculateDirectPath(\n\t\tfrom: {\n\t\t\tx: number;\n\t\t\ty: number;\n\t\t},\n\t\tto: {\n\t\t\tx: number;\n\t\t\ty: number;\n\t\t}\n\t): number[][] {\n\t\tconst matrix = this.diagramEngine.getCanvasMatrix();\n\t\tconst grid = new PF.Grid(matrix);\n\n\t\treturn pathFinderInstance.findPath(\n\t\t\tthis.diagramEngine.translateRoutingX(Math.floor(from.x / ROUTING_SCALING_FACTOR)),\n\t\t\tthis.diagramEngine.translateRoutingY(Math.floor(from.y / ROUTING_SCALING_FACTOR)),\n\t\t\tthis.diagramEngine.translateRoutingX(Math.floor(to.x / ROUTING_SCALING_FACTOR)),\n\t\t\tthis.diagramEngine.translateRoutingY(Math.floor(to.y / ROUTING_SCALING_FACTOR)),\n\t\t\tgrid\n\t\t);\n\t}\n\n\t/**\n\t * Using @link{#calculateDirectPath}'s result as input, we here\n\t * determine the first walkable point found in the matrix that includes\n\t * blocked paths.\n\t */\n\tcalculateLinkStartEndCoords(\n\t\tmatrix: number[][],\n\t\tpath: number[][]\n\t): {\n\t\tstart: {\n\t\t\tx: number;\n\t\t\ty: number;\n\t\t};\n\t\tend: {\n\t\t\tx: number;\n\t\t\ty: number;\n\t\t};\n\t\tpathToStart: number[][];\n\t\tpathToEnd: number[][];\n\t} {\n\t\tconst startIndex = path.findIndex(point => matrix[point[1]][point[0]] === 0);\n\t\tconst endIndex =\n\t\t\tpath.length -\n\t\t\t1 -\n\t\t\tpath\n\t\t\t\t.slice()\n\t\t\t\t.reverse()\n\t\t\t\t.findIndex(point => matrix[point[1]][point[0]] === 0);\n\n\t\t// are we trying to create a path exclusively through blocked areas?\n\t\t// if so, let's fallback to the linear routing\n\t\tif (startIndex === -1 || endIndex === -1) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst pathToStart = path.slice(0, startIndex);\n\t\tconst pathToEnd = path.slice(endIndex);\n\n\t\treturn {\n\t\t\tstart: {\n\t\t\t\tx: path[startIndex][0],\n\t\t\t\ty: path[startIndex][1]\n\t\t\t},\n\t\t\tend: {\n\t\t\t\tx: path[endIndex][0],\n\t\t\t\ty: path[endIndex][1]\n\t\t\t},\n\t\t\tpathToStart,\n\t\t\tpathToEnd\n\t\t};\n\t}\n\n\t/**\n\t * Puts everything together: merges the paths from/to the centre of the ports,\n\t * with the path calculated around other elements.\n\t */\n\tcalculateDynamicPath(\n\t\troutingMatrix: number[][],\n\t\tstart: {\n\t\t\tx: number;\n\t\t\ty: number;\n\t\t},\n\t\tend: {\n\t\t\tx: number;\n\t\t\ty: number;\n\t\t},\n\t\tpathToStart: number[][],\n\t\tpathToEnd: number[][]\n\t) {\n\t\t// generate the path based on the matrix with obstacles\n\t\tconst grid = new PF.Grid(routingMatrix);\n\t\tconst dynamicPath = pathFinderInstance.findPath(start.x, start.y, end.x, end.y, grid);\n\n\t\t// aggregate everything to have the calculated path ready for rendering\n\t\tconst pathCoords = pathToStart\n\t\t\t.concat(dynamicPath, pathToEnd)\n\t\t\t.map(coords => [\n\t\t\t\tthis.diagramEngine.translateRoutingX(coords[0], true),\n\t\t\t\tthis.diagramEngine.translateRoutingY(coords[1], true)\n\t\t\t]);\n\t\treturn PF.Util.compressPath(pathCoords);\n\t}\n}\n","import * as React from \"react\";\nimport * as _ from \"lodash\";\n\nexport interface BaseWidgetProps {\n\t/**\n\t * Override the base class name\n\t */\n\tbaseClass?: string;\n\t/**\n\t * append additional classes\n\t */\n\tclassName?: string;\n\n\t/**\n\t * Additional props to add\n\t */\n\textraProps?: any;\n}\n\nexport class BaseWidget<P extends BaseWidgetProps = BaseWidgetProps, S = any> extends React.Component<P, S> {\n\tclassName: string;\n\n\tconstructor(name: string, props: P) {\n\t\tsuper(props);\n\t\tthis.className = name;\n\t}\n\n\tbem(selector: string): string {\n\t\treturn (this.props.baseClass || this.className) + selector + \" \";\n\t}\n\n\tgetClassName(): string {\n\t\treturn (\n\t\t\t(this.props.baseClass || this.className) + \" \" + (this.props.className ? this.props.className + \" \" : \"\")\n\t\t);\n\t}\n\n\tgetProps(): any {\n\t\treturn {\n\t\t\t...((this.props.extraProps as any) || {}),\n\t\t\tclassName: this.getClassName()\n\t\t};\n\t}\n}\n","import * as _ from \"lodash\";\nimport * as React from \"react\";\nimport { BaseAction } from \"../actions/BaseAction\";\nimport { MoveCanvasAction } from \"../actions/MoveCanvasAction\";\nimport { MoveItemsAction } from \"../actions/MoveItemsAction\";\nimport { SelectingAction } from \"../actions/SelectingAction\";\nimport { BaseEntity } from \"../BaseEntity\";\nimport { DiagramEngine } from \"../DiagramEngine\";\nimport { BaseModel, BaseModelListener } from \"../models/BaseModel\";\nimport { LinkModel } from \"../models/LinkModel\";\nimport { NodeModel } from \"../models/NodeModel\";\nimport { PointModel } from \"../models/PointModel\";\nimport { PortModel } from \"../models/PortModel\";\nimport { Toolkit } from \"../Toolkit\";\nimport { BaseWidget, BaseWidgetProps } from \"./BaseWidget\";\nimport { LinkLayerWidget } from \"./layers/LinkLayerWidget\";\nimport { NodeLayerWidget } from \"./layers/NodeLayerWidget\";\n\nexport interface DiagramProps extends BaseWidgetProps {\n\tdiagramEngine: DiagramEngine;\n\n\tallowLooseLinks?: boolean;\n\tallowCanvasTranslation?: boolean;\n\tallowCanvasZoom?: boolean;\n\tinverseZoom?: boolean;\n\tmaxNumberPointsPerLink?: number;\n\tsmartRouting?: boolean;\n\tdisableNodeMove?: boolean;\n\n\tactionStartedFiring?: (action: BaseAction) => boolean;\n\tactionStillFiring?: (action: BaseAction) => void;\n\tactionStoppedFiring?: (action: BaseAction) => void;\n\n\tdeleteKeys?: number[];\n\n\tonMoveStart?: (action: MoveItemsAction) => void;\n\tonMovingSingle?: (action: MoveItemsAction) => void;\n\tonMovingSingle2?: (action: MoveItemsAction) => void;\n\tonMoveFinished?: (\n\t\taction: MoveItemsAction,\n\t\tnodeLink?: any,\n\t\tforwardLink?: any\n\t) => void;\n\tshouldAddLink?: (\n\t\tpointLink: LinkModel,\n\t\tsrcPort: PortModel,\n\t\ttarPort: PortModel\n\t) => boolean;\n\tgraphAlreadyHasLink?: (\n\t\tpointLink: LinkModel,\n\t\tdiagramLinks,\n\t\telement\n\t) => boolean;\n\tblockDelete?: boolean;\n}\n\nexport interface DiagramState {\n\taction: BaseAction | null;\n\twasMoved: boolean;\n\trenderedNodes: boolean;\n\twindowListener: any;\n\tdiagramEngineListener: any;\n\tdocument: any;\n}\n\n/**\n * @author Dylan Vorster\n */\nexport class DiagramWidget extends BaseWidget<DiagramProps, DiagramState> {\n\tpublic static defaultProps: DiagramProps = {\n\t\tdiagramEngine: null,\n\t\tallowLooseLinks: true,\n\t\tallowCanvasTranslation: true,\n\t\tallowCanvasZoom: true,\n\t\tinverseZoom: false,\n\t\tmaxNumberPointsPerLink: Infinity, // backwards compatible default\n\t\tsmartRouting: false,\n\t\tdeleteKeys: [46, 8],\n\t};\n\n\tonKeyUpPointer: (this: Window, ev: KeyboardEvent) => void = null;\n\n\tconstructor(props: DiagramProps) {\n\t\tsuper(\"srd-diagram\", props);\n\t\tthis.onMouseMove = this.onMouseMove.bind(this);\n\t\tthis.onMouseUp = this.onMouseUp.bind(this);\n\t\tthis.state = {\n\t\t\taction: null,\n\t\t\twasMoved: false,\n\t\t\trenderedNodes: false,\n\t\t\twindowListener: null,\n\t\t\tdiagramEngineListener: null,\n\t\t\tdocument: null,\n\t\t};\n\t}\n\n\tcomponentWillUnmount() {\n\t\tthis.props.diagramEngine.removeListener(\n\t\t\tthis.state.diagramEngineListener\n\t\t);\n\t\tthis.props.diagramEngine.setCanvas(null);\n\t\twindow.removeEventListener(\"keyup\", this.onKeyUpPointer);\n\t\twindow.removeEventListener(\"mouseUp\", this.onMouseUp);\n\t\twindow.removeEventListener(\"mouseMove\", this.onMouseMove);\n\n\t\tconst graphElement = document.getElementById('graphElement');\n\t\tgraphElement.removeEventListener (\"wheel\", this.preventPageZoom);\n\t}\n\n\tcomponentWillReceiveProps(nextProps: DiagramProps) {\n\t\tif (this.props.diagramEngine !== nextProps.diagramEngine) {\n\t\t\tthis.props.diagramEngine.removeListener(\n\t\t\t\tthis.state.diagramEngineListener\n\t\t\t);\n\t\t\tconst diagramEngineListener = nextProps.diagramEngine.addListener({\n\t\t\t\trepaintCanvas: () => this.forceUpdate(),\n\t\t\t});\n\t\t\tthis.setState({ diagramEngineListener });\n\t\t}\n\t}\n\n\tcomponentWillUpdate(nextProps: DiagramProps) {\n\t\tif (\n\t\t\tthis.props.diagramEngine.diagramModel.id !==\n\t\t\tnextProps.diagramEngine.diagramModel.id\n\t\t) {\n\t\t\tthis.setState({ renderedNodes: false });\n\t\t\tnextProps.diagramEngine.diagramModel.rendered = true;\n\t\t}\n\t\tif (!nextProps.diagramEngine.diagramModel.rendered) {\n\t\t\tthis.setState({ renderedNodes: false });\n\t\t\tnextProps.diagramEngine.diagramModel.rendered = true;\n\t\t}\n\t}\n\n\tcomponentDidUpdate() {\n\t\tif (!this.state.renderedNodes) {\n\t\t\tthis.setState({\n\t\t\t\trenderedNodes: true,\n\t\t\t});\n\t\t}\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.onKeyUpPointer = this.onKeyUp.bind(this);\n\n\t\t//add a keyboard listener\n\t\tthis.setState({\n\t\t\tdocument: document,\n\t\t\trenderedNodes: true,\n\t\t\tdiagramEngineListener: this.props.diagramEngine.addListener({\n\t\t\t\trepaintCanvas: () => {\n\t\t\t\t\tthis.forceUpdate();\n\t\t\t\t},\n\t\t\t}),\n\t\t});\n\n\t\twindow.addEventListener(\"keyup\", this.onKeyUpPointer, false);\n\n\t\t// dont focus the window when in test mode - jsdom fails\n\t\tif (process.env.NODE_ENV !== \"test\") {\n\t\t\twindow.focus();\n\t\t}\n\n\t\tconst graphElement = document.getElementById('graphElement');\n\t\tgraphElement.addEventListener (\"wheel\", this.preventPageZoom, {passive: false});\n\t}\n\n\t/**\n\t * Gets a model and element under the mouse cursor\n\t */\n\tgetMouseElement(event): {\n\t\tmodel: BaseModel<BaseEntity, BaseModelListener>;\n\t\telement: Element;\n\t} {\n\t\tvar target = event.target as Element;\n\t\tvar diagramModel = this.props.diagramEngine.diagramModel;\n\n\t\t//is it a port\n\t\tvar element = Toolkit.closest(target, \".port[data-name]\");\n\t\tif (element) {\n\t\t\tvar nodeElement = Toolkit.closest(\n\t\t\t\ttarget,\n\t\t\t\t\".node[data-nodeid]\"\n\t\t\t) as HTMLElement;\n\t\t\treturn {\n\t\t\t\tmodel: diagramModel\n\t\t\t\t\t.getNode(nodeElement.getAttribute(\"data-nodeid\"))\n\t\t\t\t\t.getPort(element.getAttribute(\"data-name\")),\n\t\t\t\telement: element,\n\t\t\t};\n\t\t}\n\n\t\t//look for a point\n\t\telement = Toolkit.closest(target, \".point[data-id]\");\n\t\tif (element) {\n\t\t\treturn {\n\t\t\t\tmodel: diagramModel\n\t\t\t\t\t.getLink(element.getAttribute(\"data-linkid\"))\n\t\t\t\t\t.getPointModel(element.getAttribute(\"data-id\")),\n\t\t\t\telement: element,\n\t\t\t};\n\t\t}\n\n\t\t//look for a link\n\t\telement = Toolkit.closest(target, \"[data-linkid]\");\n\t\tif (element) {\n\t\t\treturn {\n\t\t\t\tmodel: diagramModel.getLink(\n\t\t\t\t\telement.getAttribute(\"data-linkid\")\n\t\t\t\t),\n\t\t\t\telement: element,\n\t\t\t};\n\t\t}\n\n\t\t//look for a node\n\t\telement = Toolkit.closest(target, \".node[data-nodeid]\");\n\t\tif (element) {\n\t\t\treturn {\n\t\t\t\tmodel: diagramModel.getNode(\n\t\t\t\t\telement.getAttribute(\"data-nodeid\")\n\t\t\t\t),\n\t\t\t\telement: element,\n\t\t\t};\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tfireAction() {\n\t\tif (this.state.action && this.props.actionStillFiring) {\n\t\t\tthis.props.actionStillFiring(this.state.action);\n\t\t}\n\t}\n\n\tstopFiringAction(shouldSkipEvent?: boolean) {\n\t\tif (this.props.actionStoppedFiring && !shouldSkipEvent) {\n\t\t\tthis.props.actionStoppedFiring(this.state.action);\n\t\t}\n\t\tthis.setState({ action: null });\n\t}\n\n\tstartFiringAction(action: BaseAction) {\n\t\tvar setState = true;\n\t\tif (this.props.actionStartedFiring) {\n\t\t\tsetState = this.props.actionStartedFiring(action);\n\t\t}\n\t\tif (setState) {\n\t\t\tthis.setState({ action: action });\n\t\t}\n\t}\n\n\tonMouseMove(event) {\n\t\tvar diagramEngine = this.props.diagramEngine;\n\t\tvar diagramModel = diagramEngine.getDiagramModel();\n\t\t//select items so draw a bounding box\n\t\tif (this.state.action instanceof SelectingAction) {\n\t\t\tvar relative = diagramEngine.getRelativePoint(\n\t\t\t\tevent.clientX,\n\t\t\t\tevent.clientY\n\t\t\t);\n\n\t\t\t_.forEach(diagramModel.getNodes(), (node) => {\n\t\t\t\tif (\n\t\t\t\t\t(this.state.action as SelectingAction).containsElement(\n\t\t\t\t\t\tnode.x,\n\t\t\t\t\t\tnode.y,\n\t\t\t\t\t\tdiagramModel\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\tif (!node.selected) {\n\t\t\t\t\t\tnode.setSelected(true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t_.forEach(diagramModel.getLinks(), (link) => {\n\t\t\t\tvar allSelected = true;\n\t\t\t\t_.forEach(link.points, (point) => {\n\t\t\t\t\tif (\n\t\t\t\t\t\t(this.state.action as SelectingAction).containsElement(\n\t\t\t\t\t\t\tpoint.x,\n\t\t\t\t\t\t\tpoint.y,\n\t\t\t\t\t\t\tdiagramModel\n\t\t\t\t\t\t)\n\t\t\t\t\t) {\n\t\t\t\t\t\tpoint.setSelected(true);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tallSelected = false;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tif (allSelected) {\n\t\t\t\t\tlink.setSelected(true);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tthis.state.action.mouseX2 = relative.x;\n\t\t\tthis.state.action.mouseY2 = relative.y;\n\n\t\t\tthis.fireAction();\n\t\t\tthis.setState({ action: this.state.action });\n\t\t\treturn;\n\t\t} else if (\n\t\t\tthis.state.action instanceof MoveItemsAction &&\n\t\t\t!this.props.disableNodeMove\n\t\t) {\n\t\t\tlet amountX = event.clientX - this.state.action.mouseX;\n\t\t\tlet amountY = event.clientY - this.state.action.mouseY;\n\t\t\tlet amountZoom = diagramModel.getZoomLevel() / 100;\n\n\t\t\t_.forEach(this.state.action.selectionModels, (model) => {\n\t\t\t\t// in this case we need to also work out the relative grid position\n\t\t\t\tif (\n\t\t\t\t\tmodel.model instanceof NodeModel ||\n\t\t\t\t\t(model.model instanceof PointModel &&\n\t\t\t\t\t\t!model.model.isConnectedToPort())\n\t\t\t\t) {\n\t\t\t\t\tmodel.model.x = diagramModel.getGridPosition(\n\t\t\t\t\t\tmodel.initialX + amountX / amountZoom\n\t\t\t\t\t);\n\t\t\t\t\tmodel.model.y = diagramModel.getGridPosition(\n\t\t\t\t\t\tmodel.initialY + amountY / amountZoom\n\t\t\t\t\t);\n\n\t\t\t\t\t// update port coordinates as well\n\t\t\t\t\tif (model.model instanceof NodeModel) {\n\t\t\t\t\t\t_.forEach(model.model.getPorts(), (port) => {\n\t\t\t\t\t\t\tconst portCoords =\n\t\t\t\t\t\t\t\tthis.props.diagramEngine.getPortCoords(port);\n\t\t\t\t\t\t\tport.updateCoords(portCoords);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\tif (diagramEngine.isSmartRoutingEnabled()) {\n\t\t\t\t\t\tdiagramEngine.calculateRoutingMatrix();\n\t\t\t\t\t}\n\t\t\t\t} else if (model.model instanceof PointModel) {\n\t\t\t\t\t// we want points that are connected to ports, to not necessarily snap to grid\n\t\t\t\t\t// this stuff needs to be pixel perfect, dont touch it\n\t\t\t\t\tmodel.model.x =\n\t\t\t\t\t\tmodel.initialX +\n\t\t\t\t\t\tdiagramModel.getGridPosition(amountX / amountZoom);\n\t\t\t\t\tmodel.model.y =\n\t\t\t\t\t\tmodel.initialY +\n\t\t\t\t\t\tdiagramModel.getGridPosition(amountY / amountZoom);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (diagramEngine.isSmartRoutingEnabled()) {\n\t\t\t\tdiagramEngine.calculateCanvasMatrix();\n\t\t\t}\n\n\t\t\tthis.fireAction();\n\t\t\tif (this.props.onMovingSingle) {\n\t\t\t\tthis.props.onMovingSingle(this.state.action);\n\t\t\t}\n\t\t\tif (this.props.onMovingSingle2) {\n\t\t\t\tthis.props.onMovingSingle2(this.state.action);\n\t\t\t}\n\t\t\tif (!this.state.wasMoved) {\n\t\t\t\tthis.setState({ wasMoved: true });\n\t\t\t} else {\n\t\t\t\tthis.forceUpdate();\n\t\t\t}\n\t\t} else if (this.state.action instanceof MoveCanvasAction) {\n\t\t\t//translate the actual canvas\n\t\t\tif (this.props.allowCanvasTranslation) {\n\t\t\t\tdiagramModel.setOffset(\n\t\t\t\t\tthis.state.action.initialOffsetX +\n\t\t\t\t\t\t(event.clientX - this.state.action.mouseX),\n\t\t\t\t\tthis.state.action.initialOffsetY +\n\t\t\t\t\t\t(event.clientY - this.state.action.mouseY)\n\t\t\t\t);\n\t\t\t\tdiagramModel.setIsCanvasMoving(true);\n\t\t\t\tthis.fireAction();\n\t\t\t\tthis.forceUpdate();\n\t\t\t}\n\t\t}\n\t}\n\n\tonKeyUp(event) {\n\t\t// don't delete anything if an input field is focused\n\t\tif (\n\t\t\t(event.path && event.path[0].tagName === \"INPUT\") ||\n\t\t\tthis.props.blockDelete\n\t\t) {\n\t\t\treturn;\n\t\t}\n\t\t//delete all selected\n\t\tif (this.props.deleteKeys.indexOf(event.keyCode) !== -1) {\n\t\t\t_.forEach(\n\t\t\t\tthis.props.diagramEngine.getDiagramModel().getSelectedItems(),\n\t\t\t\t(element) => {\n\t\t\t\t\t//only delete items which are not locked\n\t\t\t\t\tif (!this.props.diagramEngine.isModelLocked(element)) {\n\t\t\t\t\t\telement.remove();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\t\t\tthis.forceUpdate();\n\t\t}\n\t}\n\n\tonMouseUp(event) {\n\t\tlet nodeLink;\n\t\tlet forwardLink;\n\t\tvar diagramEngine = this.props.diagramEngine;\n\t\t//are we going to connect a link to something?\n\t\tif (this.state.action instanceof MoveItemsAction) {\n\t\t\tvar element = this.getMouseElement(event);\n\t\t\t_.forEach(this.state.action.selectionModels, (model) => {\n\t\t\t\t//only care about points connecting to things\n\t\t\t\tif (!(model.model instanceof PointModel)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst pointLink = model.model.getLink();\n\t\t\t\tconst diagramLinks = diagramEngine.diagramModel.links;\n\t\t\t\tif (\n\t\t\t\t\t(this.state.action as MoveItemsAction).selectionModels\n\t\t\t\t\t\t.length === 1 &&\n\t\t\t\t\telement &&\n\t\t\t\t\telement.model &&\n\t\t\t\t\t(element.model as any).toolType\n\t\t\t\t) {\n\t\t\t\t\tconst isData: boolean =\n\t\t\t\t\t\t(pointLink.sourcePort as any).portType !== \"model\";\n\t\t\t\t\tlet matchingPortId: string | undefined;\n\t\t\t\t\tif ((pointLink.sourcePort as any).in) {\n\t\t\t\t\t\tconst portKeys = Object.keys(\n\t\t\t\t\t\t\t(element.model as any).ports\n\t\t\t\t\t\t);\n\t\t\t\t\t\tfor (let c = 0; c < portKeys.length; c++) {\n\t\t\t\t\t\t\tconst k = portKeys[c];\n\t\t\t\t\t\t\tconst port = (element.model as any).ports[k] as any;\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t!port.in &&\n\t\t\t\t\t\t\t\t((port.portType === \"model\" && !isData) ||\n\t\t\t\t\t\t\t\t\t(port.portType !== \"model\" && isData))\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tmatchingPortId = k;\n\t\t\t\t\t\t\t\tif (Object.keys(port.links).length === 0) {\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (matchingPortId) {\n\t\t\t\t\t\t\tconst matchPort = (element.model as any).ports[\n\t\t\t\t\t\t\t\tmatchingPortId\n\t\t\t\t\t\t\t];\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\tthis.props.shouldAddLink(\n\t\t\t\t\t\t\t\t\tpointLink,\n\t\t\t\t\t\t\t\t\tmatchPort,\n\t\t\t\t\t\t\t\t\tpointLink.sourcePort\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tnodeLink = model.model.getLink().clone({});\n\t\t\t\t\t\t\t\tnodeLink.setSourcePort(matchPort);\n\t\t\t\t\t\t\t\tnodeLink.setTargetPort(pointLink.sourcePort);\n\t\t\t\t\t\t\t\tdiagramEngine\n\t\t\t\t\t\t\t\t\t.getDiagramModel()\n\t\t\t\t\t\t\t\t\t.addLink(nodeLink);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst portKeys = Object.keys(\n\t\t\t\t\t\t\t(element.model as any).ports\n\t\t\t\t\t\t);\n\t\t\t\t\t\tfor (let c = 0; c < portKeys.length; c++) {\n\t\t\t\t\t\t\tconst k = portKeys[c];\n\t\t\t\t\t\t\tconst port = (element.model as any).ports[k] as any;\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\tport.in &&\n\t\t\t\t\t\t\t\t((port.portType === \"model\" && !isData) ||\n\t\t\t\t\t\t\t\t\t(port.portType !== \"model\" && isData))\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tmatchingPortId = k;\n\t\t\t\t\t\t\t\tif (Object.keys(port.links).length === 0) {\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (matchingPortId) {\n\t\t\t\t\t\t\tconst matchPort = (element.model as any).ports[\n\t\t\t\t\t\t\t\tmatchingPortId\n\t\t\t\t\t\t\t];\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\tthis.props.shouldAddLink(\n\t\t\t\t\t\t\t\t\tpointLink,\n\t\t\t\t\t\t\t\t\tpointLink.sourcePort,\n\t\t\t\t\t\t\t\t\tmatchPort\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tnodeLink = model.model.getLink().clone({});\n\t\t\t\t\t\t\t\tnodeLink.setSourcePort(pointLink.sourcePort);\n\t\t\t\t\t\t\t\tnodeLink.setTargetPort(matchPort);\n\t\t\t\t\t\t\t\tdiagramEngine\n\t\t\t\t\t\t\t\t\t.getDiagramModel()\n\t\t\t\t\t\t\t\t\t.addLink(nodeLink);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (\n\t\t\t\t\t!element ||\n\t\t\t\t\t(element.model &&\n\t\t\t\t\t\telement.model.parent &&\n\t\t\t\t\t\telement.model.parent.id ===\n\t\t\t\t\t\t\tpointLink.sourcePort.parent.id)\n\t\t\t\t) {\n\t\t\t\t\tconst allModels = (this.state.action as any)\n\t\t\t\t\t\t.selectionModels;\n\t\t\t\t\tif (\n\t\t\t\t\t\t(allModels && allModels.length === 1) ||\n\t\t\t\t\t\tpointLink.getSourcePort() === null ||\n\t\t\t\t\t\tpointLink.getTargetPort() === null\n\t\t\t\t\t) {\n\t\t\t\t\t\t// dont allow to link the same node or links that end on things not in graph, like header\n\t\t\t\t\t\tpointLink.remove();\n\t\t\t\t\t} else if (\n\t\t\t\t\t\t(pointLink.getSourcePort() as any).in ===\n\t\t\t\t\t\t(pointLink.getTargetPort() as any).in\n\t\t\t\t\t) {\n\t\t\t\t\t\t// do not allow in to in or end to end\n\t\t\t\t\t\tpointLink.remove();\n\t\t\t\t\t}\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (pointLink.sourcePort) {\n\t\t\t\t\tthis.props.graphAlreadyHasLink(\n\t\t\t\t\t\tpointLink,\n\t\t\t\t\t\tdiagramLinks,\n\t\t\t\t\t\telement\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\"jsweetman-storm-react-diagrams point has not sourcePort or targetPort.\"\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tif (\n\t\t\t\t\telement &&\n\t\t\t\t\telement.model instanceof PortModel &&\n\t\t\t\t\t!diagramEngine.isModelLocked(element.model)\n\t\t\t\t) {\n\t\t\t\t\tlet link = model.model.getLink();\n\t\t\t\t\tif (link.getTargetPort() !== null) {\n\t\t\t\t\t\t// Jon: we don't want this weird feature\n\t\t\t\t\t\t//if this was a valid link already and we are adding a node in the middle, create 2 links from the original\n\t\t\t\t\t\t// if (link.getTargetPort() !== element.model && link.getSourcePort() !== element.model) {\n\t\t\t\t\t\t// \tconst targetPort = link.getTargetPort();\n\t\t\t\t\t\t// \tlet newLink = link.clone({});\n\t\t\t\t\t\t// \tnewLink.setSourcePort(element.model);\n\t\t\t\t\t\t// \tnewLink.setTargetPort(targetPort);\n\t\t\t\t\t\t// \tlink.setTargetPort(element.model);\n\t\t\t\t\t\t// \ttargetPort.removeLink(link);\n\t\t\t\t\t\t// \tnewLink.removePointsBefore(newLink.getPoints()[link.getPointIndex(model.model)]);\n\t\t\t\t\t\t// \tlink.removePointsAfter(model.model);\n\t\t\t\t\t\t// \tdiagramEngine.getDiagramModel().addLink(newLink);\n\t\t\t\t\t\t// \t//if we are connecting to the same target or source, remove tweener points\n\t\t\t\t\t\t// } else if (link.getTargetPort() === element.model) {\n\t\t\t\t\t\t// \tlink.removePointsAfter(model.model);\n\t\t\t\t\t\t// } else if (link.getSourcePort() === element.model) {\n\t\t\t\t\t\t// \tlink.removePointsBefore(model.model);\n\t\t\t\t\t\t// }\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlink.setTargetPort(element.model);\n\t\t\t\t\t}\n\t\t\t\t\tdelete this.props.diagramEngine\n\t\t\t\t\t\t.linksThatHaveInitiallyRendered[link.getID()];\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t//check for / remove any loose links in any models which have been moved\n\t\t\t// Jon: Removed wasMoved, a scenario where wasMoved was false appeared if you clicked the edge of node to add, such link should be removed\n\t\t\tif (!this.props.allowLooseLinks) {\n\t\t\t\t// if (!this.props.allowLooseLinks && this.state.wasMoved) {\n\n\t\t\t\t_.forEach(this.state.action.selectionModels, (model) => {\n\t\t\t\t\t//only care about points connecting to things\n\t\t\t\t\tif (!(model.model instanceof PointModel)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tlet selectedPoint: PointModel = model.model;\n\t\t\t\t\tlet link: LinkModel = selectedPoint.getLink();\n\t\t\t\t\tif (\n\t\t\t\t\t\tlink.getSourcePort() === null ||\n\t\t\t\t\t\tlink.getTargetPort() === null\n\t\t\t\t\t) {\n\t\t\t\t\t\tlink.remove();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\t// }\n\t\t\t}\n\n\t\t\t//remove any invalid links\n\t\t\t_.forEach(this.state.action.selectionModels, (model) => {\n\t\t\t\t//only care about points connecting to things\n\t\t\t\tif (!(model.model instanceof PointModel)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tlet link: LinkModel = model.model.getLink();\n\t\t\t\tlet sourcePort: PortModel = link.getSourcePort();\n\t\t\t\tlet targetPort: PortModel = link.getTargetPort();\n\t\t\t\tif (sourcePort !== null && targetPort !== null) {\n\t\t\t\t\tif ((sourcePort as any).in && !(targetPort as any).in) {\n\t\t\t\t\t\tforwardLink = link.clone({});\n\t\t\t\t\t\tforwardLink.setSourcePort(targetPort);\n\t\t\t\t\t\tforwardLink.setTargetPort(sourcePort);\n\t\t\t\t\t\tdiagramEngine.getDiagramModel().addLink(forwardLink);\n\t\t\t\t\t\tlink.remove();\n\t\t\t\t\t} else if (\n\t\t\t\t\t\t(sourcePort as any).in === (targetPort as any).in\n\t\t\t\t\t) {\n\t\t\t\t\t\t// do not allow in to in or end to end\n\t\t\t\t\t\tlink.remove();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// Jon: This code doesn't seem to work\n\t\t\t\t// let link: LinkModel = model.model.getLink();\n\t\t\t\t// let sourcePort: PortModel = link.getSourcePort();\n\t\t\t\t// let targetPort: PortModel = link.getTargetPort();\n\t\t\t\t// if (sourcePort !== null && targetPort !== null) {\n\t\t\t\t// \tif (!sourcePort.canLinkToPort(targetPort)) {\n\t\t\t\t// \t\t//link not allowed\n\t\t\t\t// \t\tlink.remove();\n\t\t\t\t// \t} else if (\n\t\t\t\t// \t\t_.some(\n\t\t\t\t// \t\t\t_.values(targetPort.getLinks()),\n\t\t\t\t// \t\t\t(l: LinkModel) =>\n\t\t\t\t// \t\t\t\tl !== link && (l.getSourcePort() === sourcePort || l.getTargetPort() === sourcePort)\n\t\t\t\t// \t\t)\n\t\t\t\t// \t) {\n\t\t\t\t// \t\t//link is a duplicate\n\t\t\t\t// \t\tlink.remove();\n\t\t\t\t// \t}\n\t\t\t\t// }\n\t\t\t});\n\t\t\tif (this.props.onMoveFinished && this.state.wasMoved) {\n\t\t\t\tthis.props.onMoveFinished(\n\t\t\t\t\tthis.state.action,\n\t\t\t\t\tnodeLink,\n\t\t\t\t\tforwardLink\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tdiagramEngine.clearRepaintEntities();\n\t\t\tthis.stopFiringAction(!this.state.wasMoved);\n\t\t} else {\n\t\t\tdiagramEngine.clearRepaintEntities();\n\t\t\tdiagramEngine.getDiagramModel().setIsCanvasMoving(false);\n\t\t\tthis.stopFiringAction();\n\t\t}\n\t\tthis.state.document.removeEventListener(\"mousemove\", this.onMouseMove);\n\t\tthis.state.document.removeEventListener(\"mouseup\", this.onMouseUp);\n\t}\n\n\tdrawSelectionBox() {\n\t\tlet dimensions = (\n\t\t\tthis.state.action as SelectingAction\n\t\t).getBoxDimensions();\n\t\treturn (\n\t\t\t<div\n\t\t\t\tclassName={this.bem(\"__selector\")}\n\t\t\t\tstyle={{\n\t\t\t\t\ttop: dimensions.top,\n\t\t\t\t\tleft: dimensions.left,\n\t\t\t\t\twidth: dimensions.width,\n\t\t\t\t\theight: dimensions.height,\n\t\t\t\t}}\n\t\t\t/>\n\t\t);\n\t}\n\n\tpreventPageZoom(event) {\n\t\tif (event.ctrlKey) {\n\t\t\tevent.preventDefault();\n\t\t  }\n\t}\n\n\trender() {\n\t\tvar diagramEngine = this.props.diagramEngine;\n\t\tdiagramEngine.setMaxNumberPointsPerLink(\n\t\t\tthis.props.maxNumberPointsPerLink\n\t\t);\n\t\tdiagramEngine.setSmartRoutingStatus(this.props.smartRouting);\n\t\tvar diagramModel = diagramEngine.getDiagramModel();\n\n\t\treturn (\n\t\t\t<div\n\t\t\t\t{...this.getProps()}\n\t\t\t\tref={(ref) => {\n\t\t\t\t\tif (ref) {\n\t\t\t\t\t\tthis.props.diagramEngine.setCanvas(ref);\n\t\t\t\t\t}\n\t\t\t\t}}\n\t\t\t\tid='graphElement'\n\t\t\t\tonWheel={(event) => {\n\t\t\t\t\tif (this.props.allowCanvasZoom) {\n\t\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t\t\tconst oldZoomFactor = diagramModel.getZoomLevel() / 100;\n\t\t\t\t\t\tlet scrollDelta = this.props.inverseZoom\n\t\t\t\t\t\t\t? -event.deltaY\n\t\t\t\t\t\t\t: event.deltaY;\n\t\t\t\t\t\t//check if it is pinch gesture\n\t\t\t\t\t\tif (event.ctrlKey && scrollDelta % 1 !== 0) {\n\t\t\t\t\t\t\t/*Chrome and Firefox sends wheel event with deltaY that\n                have fractional part, also `ctrlKey` prop of the event is true\n                though ctrl isn't pressed\n              */\n\t\t\t\t\t\t\tscrollDelta /= 3;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tscrollDelta /= 60;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (diagramModel.getZoomLevel() + scrollDelta > 10) {\n\t\t\t\t\t\t\tdiagramModel.setZoomLevel(\n\t\t\t\t\t\t\t\tdiagramModel.getZoomLevel() + scrollDelta\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst zoomFactor = diagramModel.getZoomLevel() / 100;\n\n\t\t\t\t\t\tconst boundingRect =\n\t\t\t\t\t\t\tevent.currentTarget.getBoundingClientRect();\n\t\t\t\t\t\tconst clientWidth = boundingRect.width;\n\t\t\t\t\t\tconst clientHeight = boundingRect.height;\n\t\t\t\t\t\t// compute difference between rect before and after scroll\n\t\t\t\t\t\tconst widthDiff =\n\t\t\t\t\t\t\tclientWidth * zoomFactor -\n\t\t\t\t\t\t\tclientWidth * oldZoomFactor;\n\t\t\t\t\t\tconst heightDiff =\n\t\t\t\t\t\t\tclientHeight * zoomFactor -\n\t\t\t\t\t\t\tclientHeight * oldZoomFactor;\n\t\t\t\t\t\t// compute mouse coords relative to canvas\n\t\t\t\t\t\tconst clientX = event.clientX - boundingRect.left;\n\t\t\t\t\t\tconst clientY = event.clientY - boundingRect.top;\n\n\t\t\t\t\t\t// compute width and height increment factor\n\t\t\t\t\t\tconst xFactor =\n\t\t\t\t\t\t\t(clientX - diagramModel.getOffsetX()) /\n\t\t\t\t\t\t\toldZoomFactor /\n\t\t\t\t\t\t\tclientWidth;\n\t\t\t\t\t\tconst yFactor =\n\t\t\t\t\t\t\t(clientY - diagramModel.getOffsetY()) /\n\t\t\t\t\t\t\toldZoomFactor /\n\t\t\t\t\t\t\tclientHeight;\n\n\t\t\t\t\t\tdiagramModel.setOffset(\n\t\t\t\t\t\t\tdiagramModel.getOffsetX() - widthDiff * xFactor,\n\t\t\t\t\t\t\tdiagramModel.getOffsetY() - heightDiff * yFactor\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tthis.forceUpdate();\n\t\t\t\t\t}\n\t\t\t\t}}\n\t\t\t\tonMouseDown={(event) => {\n\t\t\t\t\tthis.setState({ ...this.state, wasMoved: false });\n\n\t\t\t\t\tdiagramEngine.clearRepaintEntities();\n\t\t\t\t\tvar model = this.getMouseElement(event);\n\t\t\t\t\t//the canvas was selected\n\t\t\t\t\tif (model === null) {\n\t\t\t\t\t\t//is it a multiple selection\n\t\t\t\t\t\tif (event.shiftKey) {\n\t\t\t\t\t\t\tvar relative = diagramEngine.getRelativePoint(\n\t\t\t\t\t\t\t\tevent.clientX,\n\t\t\t\t\t\t\t\tevent.clientY\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tthis.startFiringAction(\n\t\t\t\t\t\t\t\tnew SelectingAction(relative.x, relative.y)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t//its a drag the canvas event\n\t\t\t\t\t\t\tdiagramModel.clearSelection();\n\t\t\t\t\t\t\tthis.startFiringAction(\n\t\t\t\t\t\t\t\tnew MoveCanvasAction(\n\t\t\t\t\t\t\t\t\tevent.clientX,\n\t\t\t\t\t\t\t\t\tevent.clientY,\n\t\t\t\t\t\t\t\t\tdiagramModel\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (model.model instanceof PortModel) {\n\t\t\t\t\t\t//its a port element, we want to drag a link\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t!this.props.diagramEngine.isModelLocked(model.model)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tvar relative =\n\t\t\t\t\t\t\t\tdiagramEngine.getRelativeMousePoint(event);\n\t\t\t\t\t\t\tvar sourcePort = model.model;\n\t\t\t\t\t\t\tvar link = sourcePort.createLinkModel();\n\t\t\t\t\t\t\tlink.setSourcePort(sourcePort);\n\n\t\t\t\t\t\t\tif (link) {\n\t\t\t\t\t\t\t\tlink.removeMiddlePoints();\n\t\t\t\t\t\t\t\tif (link.getSourcePort() !== sourcePort) {\n\t\t\t\t\t\t\t\t\tlink.setSourcePort(sourcePort);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tlink.setTargetPort(null);\n\n\t\t\t\t\t\t\t\tlink.getFirstPoint().updateLocation(relative);\n\t\t\t\t\t\t\t\tlink.getLastPoint().updateLocation(relative);\n\n\t\t\t\t\t\t\t\tdiagramModel.clearSelection();\n\t\t\t\t\t\t\t\tlink.getLastPoint().setSelected(true);\n\t\t\t\t\t\t\t\tdiagramModel.addLink(link);\n\t\t\t\t\t\t\t\tconst moveAction = new MoveItemsAction(\n\t\t\t\t\t\t\t\t\tevent.clientX,\n\t\t\t\t\t\t\t\t\tevent.clientY,\n\t\t\t\t\t\t\t\t\tdiagramEngine\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tif (this.props.onMoveStart) {\n\t\t\t\t\t\t\t\t\tthis.props.onMoveStart(moveAction);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tthis.startFiringAction(moveAction);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tdiagramModel.clearSelection();\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t//its some or other element, probably want to move it\n\t\t\t\t\t\tif (!event.shiftKey && !model.model.isSelected()) {\n\t\t\t\t\t\t\tdiagramModel.clearSelection();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (event.shiftKey && model.model.isSelected()) {\n\t\t\t\t\t\t\tmodel.model.setSelected(false);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tmodel.model.setSelected(true);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis.startFiringAction(\n\t\t\t\t\t\t\tnew MoveItemsAction(\n\t\t\t\t\t\t\t\tevent.clientX,\n\t\t\t\t\t\t\t\tevent.clientY,\n\t\t\t\t\t\t\t\tdiagramEngine\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tthis.state.document.addEventListener(\n\t\t\t\t\t\t\"mousemove\",\n\t\t\t\t\t\tthis.onMouseMove\n\t\t\t\t\t);\n\t\t\t\t\tthis.state.document.addEventListener(\n\t\t\t\t\t\t\"mouseup\",\n\t\t\t\t\t\tthis.onMouseUp\n\t\t\t\t\t);\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t{this.state.renderedNodes && (\n\t\t\t\t\t<LinkLayerWidget\n\t\t\t\t\t\tdiagramEngine={diagramEngine}\n\t\t\t\t\t\tpointAdded={(point: PointModel, event) => {\n\t\t\t\t\t\t\tthis.state.document.addEventListener(\n\t\t\t\t\t\t\t\t\"mousemove\",\n\t\t\t\t\t\t\t\tthis.onMouseMove\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tthis.state.document.addEventListener(\n\t\t\t\t\t\t\t\t\"mouseup\",\n\t\t\t\t\t\t\t\tthis.onMouseUp\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t\t\t\tdiagramModel.clearSelection(point);\n\t\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\t\taction: new MoveItemsAction(\n\t\t\t\t\t\t\t\t\tevent.clientX,\n\t\t\t\t\t\t\t\t\tevent.clientY,\n\t\t\t\t\t\t\t\t\tdiagramEngine\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t)}\n\t\t\t\t<NodeLayerWidget diagramEngine={diagramEngine} />\n\t\t\t\t{this.state.action instanceof SelectingAction &&\n\t\t\t\t\tthis.drawSelectionBox()}\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import * as React from \"react\";\nimport { DiagramEngine } from \"../DiagramEngine\";\nimport { LinkModel } from \"../models/LinkModel\";\nimport { BaseWidget, BaseWidgetProps } from \"./BaseWidget\";\n\nexport interface LinkProps extends BaseWidgetProps {\n\tlink: LinkModel;\n\tdiagramEngine: DiagramEngine;\n\tchildren?: any;\n}\n\nexport interface LinkState {}\n\n/**\n * @author Dylan Vorster\n */\nexport class LinkWidget extends BaseWidget<LinkProps, LinkState> {\n\tconstructor(props: LinkProps) {\n\t\tsuper(\"srd-link\", props);\n\t\tthis.state = {};\n\t}\n\n\tshouldComponentUpdate() {\n\t\treturn this.props.diagramEngine.canEntityRepaint(this.props.link);\n\t}\n\n\trender() {\n\t\treturn this.props.children;\n\t}\n}\n","import * as React from \"react\";\nimport { DiagramEngine } from \"../DiagramEngine\";\nimport { NodeModel } from \"../models/NodeModel\";\nimport { Toolkit } from \"../Toolkit\";\nimport { BaseWidget, BaseWidgetProps } from \"./BaseWidget\";\n\nexport interface NodeProps extends BaseWidgetProps {\n\tnode: NodeModel;\n\tchildren?: any;\n\tdiagramEngine: DiagramEngine;\n}\n\nexport interface NodeState {}\n\n/**\n * @author Dylan Vorster\n */\nexport class NodeWidget extends BaseWidget<NodeProps, NodeState> {\n\tconstructor(props: NodeProps) {\n\t\tsuper(\"srd-node\", props);\n\t\tthis.state = {};\n\t}\n\n\tshouldComponentUpdate(nextProps) {\n\t\tconst node = this.props.node as any;\n\t\tif (node.draw) {\n\t\t\treturn true;\n\t\t}\n\t\treturn this.props.diagramEngine.canEntityRepaint(this.props.node);\n\t}\n\n\tcomponentDidUpdate() {\n\t\tconst node = this.props.node as any;\n\t\tif (node.draw) {\n\t\t\tnode.stopDraw();\n\t\t}\n\t}\n\n\tgetClassName() {\n\t\treturn \"node \" + super.getClassName() + (this.props.node.isSelected() ? this.bem(\"--selected\") : \"\");\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div\n\t\t\t\t{...this.getProps()}\n\t\t\t\tdata-nodeid={this.props.node.id}\n\t\t\t\tstyle={{\n\t\t\t\t\ttop: this.props.node.y,\n\t\t\t\t\tleft: this.props.node.x\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t{this.props.children}\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import * as React from \"react\";\nimport { NodeModel } from \"../models/NodeModel\";\nimport { BaseWidget, BaseWidgetProps } from \"./BaseWidget\";\n\nexport interface PortProps extends BaseWidgetProps {\n\tname: string;\n\tnode: NodeModel;\n}\n\nexport interface PortState {\n\tselected: boolean;\n}\n\n/**\n * @author Dylan Vorster\n */\nexport class PortWidget extends BaseWidget<PortProps, PortState> {\n\tconstructor(props: PortProps) {\n\t\tsuper(\"srd-port\", props);\n\t\tthis.state = {\n\t\t\tselected: false\n\t\t};\n\t}\n\n\tgetClassName() {\n\t\treturn \"port \" + super.getClassName() + (this.state.selected ? this.bem(\"--selected\") : \"\");\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div\n\t\t\t\t{...this.getProps()}\n\t\t\t\tonMouseEnter={() => {\n\t\t\t\t\tthis.setState({ selected: true });\n\t\t\t\t}}\n\t\t\t\tonMouseLeave={() => {\n\t\t\t\t\tthis.setState({ selected: false });\n\t\t\t\t}}\n\t\t\t\tdata-name={this.props.name}\n\t\t\t\tdata-nodeid={this.props.node.getID()}\n\t\t\t/>\n\t\t);\n\t}\n}\n","import * as React from \"react\";\nimport { DiagramEngine } from \"../../DiagramEngine\";\nimport { LinkWidget } from \"../LinkWidget\";\nimport { LinkLayerWidgetInner } from \"./LinkLayerWidgetInner\";\nimport * as _ from \"lodash\";\nimport { PointModel } from \"../../models/PointModel\";\nimport { BaseWidget, BaseWidgetProps } from \"../BaseWidget\";\n\nexport interface LinkLayerProps extends BaseWidgetProps {\n\tdiagramEngine: DiagramEngine;\n\tpointAdded: (point: PointModel, event: MouseEvent) => any;\n}\n\nexport interface LinkLayerState {}\n\n/**\n * @author Dylan Vorster\n */\nexport class LinkLayerWidget extends BaseWidget<LinkLayerProps, LinkLayerState> {\n\tconstructor(props: LinkLayerProps) {\n\t\tsuper(\"srd-link-layer\", props);\n\t\tthis.state = {};\n\t}\n\n\trender() {\n\t\tvar diagramModel = this.props.diagramEngine.getDiagramModel();\n\t\treturn (\n\t\t\t<svg\n\t\t\t\t{...this.getProps()}\n\t\t\t\tstyle={{\n\t\t\t\t\ttransform:\n\t\t\t\t\t\t\"translate(\" +\n\t\t\t\t\t\tdiagramModel.getOffsetX() +\n\t\t\t\t\t\t\"px,\" +\n\t\t\t\t\t\tdiagramModel.getOffsetY() +\n\t\t\t\t\t\t\"px) scale(\" +\n\t\t\t\t\t\tdiagramModel.getZoomLevel() / 100.0 +\n\t\t\t\t\t\t\")\"\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<LinkLayerWidgetInner diagramEngine={this.props.diagramEngine} pointAdded={this.props.pointAdded} />\n\t\t\t</svg>\n\t\t);\n\t}\n}\n","import * as React from \"react\";\nimport { DiagramEngine } from \"../../DiagramEngine\";\nimport { PointModel } from \"../../models/PointModel\";\nimport { LinkWidget } from \"../LinkWidget\";\nimport * as _ from \"lodash\";\n\nexport interface LLWIProps {\n\tdiagramEngine: DiagramEngine;\n\tpointAdded: (point: PointModel, event: MouseEvent) => any;\n}\n\nexport class LinkLayerWidgetInner extends React.Component<LLWIProps> {\n\tpublic shouldComponentUpdate(nextProps) {\n\t\tvar modelNext = nextProps.diagramEngine.getDiagramModel();\n\n\t\tvar isCanvasMoving = modelNext.getIsCanvasMoving();\n\t\treturn !isCanvasMoving;\n\t}\n\n\tpublic render() {\n\t\tvar diagramModel = this.props.diagramEngine.getDiagramModel();\n\t\treturn (\n\t\t\t<React.Fragment>\n\t\t\t\t{this.props.diagramEngine.canvas &&\n\t\t\t\t_.map(diagramModel.getLinks(), link => {\n\t\t\t\t\tif (\n\t\t\t\t\t\tthis.props.diagramEngine.nodesRendered &&\n\t\t\t\t\t\t!this.props.diagramEngine.linksThatHaveInitiallyRendered[link.id]\n\t\t\t\t\t) {\n\t\t\t\t\t\tif (link.sourcePort !== null) {\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tconst portCenter = this.props.diagramEngine.getPortCenter(link.sourcePort);\n\t\t\t\t\t\t\t\tlink.points[0].updateLocation(portCenter);\n\n\t\t\t\t\t\t\t\tconst portCoords = this.props.diagramEngine.getPortCoords(link.sourcePort);\n\t\t\t\t\t\t\t\tlink.sourcePort.updateCoords(portCoords);\n\n\t\t\t\t\t\t\t\tthis.props.diagramEngine.linksThatHaveInitiallyRendered[link.id] = true;\n\t\t\t\t\t\t\t} catch (ignore) {\n\t\t\t\t\t\t\t\t/*noop*/\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (link.targetPort !== null) {\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tconst portCenter = this.props.diagramEngine.getPortCenter(link.targetPort);\n\t\t\t\t\t\t\t\t_.last(link.points).updateLocation(portCenter);\n\n\t\t\t\t\t\t\t\tconst portCoords = this.props.diagramEngine.getPortCoords(link.targetPort);\n\t\t\t\t\t\t\t\tlink.targetPort.updateCoords(portCoords);\n\n\t\t\t\t\t\t\t\tthis.props.diagramEngine.linksThatHaveInitiallyRendered[link.id] = true;\n\t\t\t\t\t\t\t} catch (ignore) {\n\t\t\t\t\t\t\t\t/*noop*/\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t//generate links\n\t\t\t\t\tvar generatedLink = this.props.diagramEngine.generateWidgetForLink(link);\n\t\t\t\t\tif (!generatedLink) {\n\t\t\t\t\t\tthrow new Error(`no link generated for type: ${link.getType()}`);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<LinkWidget key={link.getID()} link={link} diagramEngine={this.props.diagramEngine}>\n\t\t\t\t\t\t\t{React.cloneElement(generatedLink, {\n\t\t\t\t\t\t\t\tpointAdded: this.props.pointAdded\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</LinkWidget>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</React.Fragment>\n\t\t);\n\t}\n}","import * as React from \"react\";\nimport { DiagramEngine } from \"../../DiagramEngine\";\nimport * as _ from \"lodash\";\nimport { NodeWidget } from \"../NodeWidget\";\nimport { NodeModel } from \"../../models/NodeModel\";\nimport { BaseWidget, BaseWidgetProps } from \"../BaseWidget\";\nimport { NodeLayerWidgetInner } from \"./NodeLayerWidgetInner\";\n\nexport interface NodeLayerProps extends BaseWidgetProps {\n\tdiagramEngine: DiagramEngine;\n}\n\nexport interface NodeLayerState {}\n\nexport class NodeLayerWidget extends BaseWidget<NodeLayerProps, NodeLayerState> {\n\tconstructor(props: NodeLayerProps) {\n\t\tsuper(\"srd-node-layer\", props);\n\t\tthis.state = {};\n\t}\n\n\tupdateNodeDimensions = () => {\n\t\tif (!this.props.diagramEngine.nodesRendered) {\n\t\t\tconst diagramModel = this.props.diagramEngine.getDiagramModel();\n\t\t\t_.map(diagramModel.getNodes(), node => {\n\t\t\t\tnode.updateDimensions(this.props.diagramEngine.getNodeDimensions(node));\n\t\t\t});\n\t\t}\n\t};\n\n\tcomponentDidUpdate() {\n\t\tthis.updateNodeDimensions();\n\t\tthis.props.diagramEngine.nodesRendered = true;\n\t}\n\n\trender() {\n\t\tvar diagramModel = this.props.diagramEngine.getDiagramModel();\n\t\treturn (\n\t\t\t<div\n\t\t\t\t{...this.getProps()}\n\t\t\t\tstyle={{\n\t\t\t\t\ttransform:\n\t\t\t\t\t\t\"translate(\" +\n\t\t\t\t\t\tdiagramModel.getOffsetX() +\n\t\t\t\t\t\t\"px,\" +\n\t\t\t\t\t\tdiagramModel.getOffsetY() +\n\t\t\t\t\t\t\"px) scale(\" +\n\t\t\t\t\t\tdiagramModel.getZoomLevel() / 100.0 +\n\t\t\t\t\t\t\")\"\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<NodeLayerWidgetInner diagramEngine={this.props.diagramEngine} />\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import * as React from \"react\";\nimport { DiagramEngine } from \"../../DiagramEngine\";\nimport { NodeWidget } from \"../NodeWidget\";\nimport { NodeModel } from \"../../models/NodeModel\";\nimport * as _ from \"lodash\";\n\nexport interface NLWIProps {\n\tdiagramEngine: DiagramEngine;\n}\n\nexport class NodeLayerWidgetInner extends React.Component<NLWIProps> {\n\tpublic shouldComponentUpdate(nextProps) {\n\t\tvar modelNext = nextProps.diagramEngine.getDiagramModel();\n\n\t\tvar isCanvasMoving = modelNext.getIsCanvasMoving();\n\t\treturn !isCanvasMoving;\n\t}\n\n\tpublic render() {\n\t\tvar diagramModel = this.props.diagramEngine.getDiagramModel();\n\t\treturn (\n\t\t\t<React.Fragment>\n\t\t\t\t{_.map(diagramModel.getNodes(), (node: NodeModel) => {\n\t\t\t\t\treturn React.createElement(\n\t\t\t\t\t\tNodeWidget,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdiagramEngine: this.props.diagramEngine,\n\t\t\t\t\t\t\tkey: node.id,\n\t\t\t\t\t\t\tnode: node\n\t\t\t\t\t\t},\n\t\t\t\t\t\tthis.props.diagramEngine.generateWidgetForNode(node)\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</React.Fragment>\n\t\t);\n\t}\n}","module.exports = require(\"closest\");;","module.exports = require(\"lodash\");;","module.exports = require(\"pathfinding\");;","module.exports = require(\"paths-js/path\");;","module.exports = require(\"react\");;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(519);\n"],"sourceRoot":""}